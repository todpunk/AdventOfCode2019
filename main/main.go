package main

import (
	"bufio"
	"fmt"
	"gopkg.in/alecthomas/kingpin.v2"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
)

var (
	day   = kingpin.Arg("day", "Advent day to run").Int()
)

func main() {
	kingpin.Version("0.0.1")
	kingpin.Parse()
	fmt.Printf("Would run day: %d\n", *day)
	switch *day {
	case 1:
		day1()
	case 2:
		day2()
	case 3:
		day3()
	case 4:
		day4()
	case 5:
		day5()
	case 6:
		day6()
	case 7:
		day7()
	case 8:
		day8()
	case 9:
		day9()
	case 10:
		day10()
	case 11:
		day11()
	case 13:
		day13()
	default:
		fmt.Println("We don't have that day...")
	}
}

func day1() {
	file, err := os.Open("./day1-input.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var modules []int64
	var sum int64 = 0
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		var module int64
		module, _ = strconv.ParseInt(scanner.Text(), 10, 32)
		sum += module / 3.0 - 2
		modules = append(modules, module)
	}

	fmt.Printf("Total fuel required: %d\n", sum)
	fmt.Println("But we need to fuel that fuel, so....")

	var newFuel int64
	sum = 0
	for i, _ := range modules {
		for newFuel = modules[i]; newFuel > 0; {
			newFuel = newFuel / 3 - 2
			if newFuel > 0 {
				sum += newFuel
			}
		}
	}
	fmt.Printf("New Total fuel required (calculated per module): %d\n", sum)
}

func getParamValueWithMode(codes map[int64]int64, mode int64, location int64, relativeBase int64) (param int64) {
	switch mode {
	case 0:
		return codes[codes[location]]
	case 1:
		return codes[location]
	case 2:
		return codes[relativeBase+codes[location]]
	default:
		fmt.Printf("Can not get with mode %d as it is unknown at location %d\n", mode, location)
		return -1
	}
}
func setParamWithMode(codes map[int64]int64, mode int64, location int64, value int64, relativeBase int64) (result int64) {
	switch mode {
	case 0:
		codes[codes[location]] = value
	case 1:
		// Yes, I know this should never occur.  But it wasn't called out as explicitly not able to occur.
		codes[location] = value
	case 2:
		codes[relativeBase+codes[location]] = value
	default:
		fmt.Printf("Can not set with mode %d as it is unknown at location %d\n", mode, location)
		return -1
	}
	return 0
}

type inputGatherer func() int64
type outputHandler func(int64)

func gatherInputFromUser() (result int64) {
	fmt.Print("Enter number: ")
	_, _ = fmt.Scanf("%d", &result)
	fmt.Println("Input was:", result)
	return result
}

func printOutputHandler(output int64) {
	fmt.Println("Output:", output)
}

func runIntComp(codes []int64, gatherer inputGatherer, outputFunc outputHandler) (pos0 int64 ) {
	var i int64
	var relativeBase int64
	var codesMap = map[int64]int64{}

	for i = 0; i < int64(len(codes)); i++ {
		codesMap[i] = codes[i]
	}

	for i = 0; i < int64(len(codes)-1);  {
		opcode := codesMap[i] % 100
		mode1 := (codesMap[i] / 100) % 10
		mode2 := (codesMap[i] / 1000) % 10
		mode3 := (codesMap[i] / 10000) % 10
		switch opcode {
		case 99:
			i = int64(len(codes))
		case 1:
			a := getParamValueWithMode(codesMap, mode1, i+1, relativeBase)
			b := getParamValueWithMode(codesMap, mode2, i+2, relativeBase)
			result := setParamWithMode(codesMap, mode3, i+3, a + b, relativeBase)
			if result == -1 {
				i = int64(len(codes))
			}
			i += 4
		case 2:
			a := getParamValueWithMode(codesMap, mode1, i+1, relativeBase)
			b := getParamValueWithMode(codesMap, mode2, i+2, relativeBase)
			result := setParamWithMode(codesMap, mode3, i+3, a * b, relativeBase)
			if result == -1 {
				i = int64(len(codes))
			}
			i += 4
		case 3:
			input := gatherer()
			result := setParamWithMode(codesMap, mode1, i+1, input, relativeBase)
			if result == -1 {
				i = int64(len(codes))
			}
			i += 2
		case 4:
			outputFunc(getParamValueWithMode(codesMap, mode1, i+1, relativeBase))
			i += 2
		case 5:
			first := getParamValueWithMode(codesMap, mode1, i+1, relativeBase)
			if first != 0 {
				i = getParamValueWithMode(codesMap, mode2, i+2, relativeBase)
			} else {
				i += 3
			}
		case 6:
			first := getParamValueWithMode(codesMap, mode1, i+1, relativeBase)
			if first == 0 {
				i = getParamValueWithMode(codesMap, mode2, i+2, relativeBase)
			} else {
				i += 3
			}
		case 7:
			first := getParamValueWithMode(codesMap, mode1, i+1, relativeBase)
			second := getParamValueWithMode(codesMap, mode2, i+2, relativeBase)
			var result int64
			if first < second {
				result = setParamWithMode(codesMap, mode3, i+3, 1, relativeBase)
			} else {
				result = setParamWithMode(codesMap, mode3, i+3, 0, relativeBase)
			}
			i += 4
			if result == -1 {
				i = int64(len(codes))
			}
		case 8:
			first := getParamValueWithMode(codesMap, mode1, i+1, relativeBase)
			second := getParamValueWithMode(codesMap, mode2, i+2, relativeBase)
			var result int64
			if first == second {
				result = setParamWithMode(codesMap, mode3, i+3, 1, relativeBase)
			} else {
				result = setParamWithMode(codesMap, mode3, i+3, 0, relativeBase)
			}
			i += 4
			if result == -1 {
				i = int64(len(codes))
			}
		case 9:
			//fmt.Println("Raw instruction and such:", i, codesMap[i], codesMap[i+1])
			first := getParamValueWithMode(codesMap, mode1, i+1, relativeBase)
			relativeBase += first
			i += 2
		default:
			i = int64(len(codes))
			fmt.Printf("This went poorly, opcode: %d at %d\n", opcode, i)
		}
	}
	return codesMap[0]
}

func day2() {
	rawCodes := []int64{1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,9,1,19,1,19,5,23,1,23,6,27,2,9,27,31,1,5,31,35,1,35,10,39,1,39,10,43,2,43,9,47,1,6,47,51,2,51,6,55,1,5,55,59,2,59,10,63,1,9,63,67,1,9,67,71,2,71,6,75,1,5,75,79,1,5,79,83,1,9,83,87,2,87,10,91,2,10,91,95,1,95,9,99,2,99,9,103,2,10,103,107,2,9,107,111,1,111,5,115,1,115,2,119,1,119,6,0,99,2,0,14,0}
	var codes = make([]int64, len(rawCodes))
	copy(codes, rawCodes)
	fmt.Println(rawCodes)
	fmt.Println(codes)
	codes[1] = 12
	codes[2] = 2
	fmt.Printf("Position 0: %d\n", runIntComp(codes, gatherInputFromUser, printOutputHandler))

	var pos0, noun, verb int64
	for noun = 1; noun < 100; noun++ {
		for verb = 1; verb < 100; verb++ {
			copy(codes, rawCodes)
			codes[1] = noun
			codes[2] = verb
			pos0 = runIntComp(codes, gatherInputFromUser, printOutputHandler)
			if pos0 == 19690720 {
				fmt.Printf("Noun: %d Verb: %d Result: %d\n", noun, verb, 100 * noun + verb)
				noun = 99
				verb = 99
			}
		}
	}
}

type gridPoint struct{
	x int64
	y int64
}

func Abs(x int64) int64 {
	if x < 0 {
		return -x
	}
	return x
}
func AbsInt(x int) int {
	if x < 0 {
		return -x
	}
	return x
}

func calculateWire(wirePoints map[gridPoint]int64, wire []string){
	var dirs = map[string]gridPoint{
		"R": {1,0},
		"L": {-1,0},
		"U": {0,1},
		"D": {0,-1},
	}

	var current = gridPoint{0,0}
	var totalSteps int64 = 0
	for _, segment := range wire {
		dir := string(segment[0])
		var distance int64
		distance, _ = strconv.ParseInt(segment[1:], 10, 64)
		var i int64
		for i = 0; i < distance; i++ {
			totalSteps += 1
			current.x += dirs[dir].x
			current.y += dirs[dir].y
			wirePoints[current] = totalSteps
		}
	}
}

func calculateOverlap(a, b map[gridPoint]int64) (c map[gridPoint]int64) {
	c = make(map[gridPoint]int64)

	for item, valB := range b {
		if _, ok := a[item]; ok {
			c[item] = a[item] + valB
		}
	}
	return
}

func day3() {
	var wire1 = []string{"R1009","U263","L517","U449","L805","D78","L798","D883","L777","D562","R652","D348","R999","D767","L959","U493","R59","D994","L225","D226","R634","D200","R953","U343","L388","U158","R943","U544","L809","D785","R618","U499","L476","U600","L452","D693","L696","U764","L927","D346","L863","D458","L789","U268","R586","U884","L658","D371","L910","U178","R524","U169","R973","D326","R483","U233","R26","U807","L246","D711","L641","D75","R756","U365","R203","D377","R624","U430","L422","U367","R547","U294","L916","D757","R509","D332","R106","D401","L181","U5","L443","U197","R406","D829","R878","U35","L958","U31","L28","D362","R188","D582","R358","U750","R939","D491","R929","D513","L541","U418","R861","D639","L917","U582","R211","U725","R711","D718","L673","U921","L157","U83","L199","U501","L66","D993","L599","D947","L26","U237","L981","U833","L121","U25","R641","D372","L757","D645","R287","U390","R274","U964","R288","D209","R109","D364","R983","U715","L315","U758","R36","D500","R626","U893","L840","U716","L606","U831","L969","D643","L300","D838","R31","D751","L632","D702","R468","D7","L169","U149","R893","D33","R816","D558","R152","U489","L237","U415","R434","D472","L198","D874","L351","U148","R761","U809","R21","D25","R586","D338","L568","U20","L157","U221","L26","U424","R261","D227","L551","D754","L90","U110","L791","U433","R840","U323","R240","U124","L723","D418","R938","D173","L160","U293","R773","U204","R192","U958","L472","D703","R556","D168","L263","U574","L845","D932","R165","D348","R811","D834","R960","U877","R935","D141","R696","U748","L316","U236","L796","D566","R524","U449","R378","U480","L79","U227","R867","D185","R474","D757","R366","U153","R882","U252","R861","U900","R28","U381","L845","U642","L849","U352","R134","D294","R788","D406","L693","D697","L433","D872","R78","D364","R240","U995","R48","D681","R727","D825","L583","U44","R743","D929","L616","D262","R997","D15","R575","U341","R595","U889","R254","U76","R962","D944","R724","D261","R608","U753","L389","D324","L569","U308","L488","D358","L695","D863","L712","D978","R149","D177","R92"}
	var wire2 = []string{"L1003","D960","L10","D57","R294","U538","R867","D426","L524","D441","R775","U308","R577","D785","R495","U847","R643","D895","R448","U685","L253","U312","L312","U753","L89","U276","R799","D923","L33","U595","R400","U111","L664","D542","R171","U709","L809","D713","L483","U918","L14","U854","L150","D69","L158","D500","L91","D800","R431","D851","L798","U515","L107","U413","L94","U390","L17","U221","L999","D546","L191","U472","L568","U114","L913","D743","L713","D215","L569","D674","L869","U549","L789","U259","L330","D76","R243","D592","L646","U880","L363","U542","L464","D955","L107","U473","R818","D786","R852","U968","R526","D78","L275","U891","R480","U991","L981","D391","R83","U691","R689","D230","L217","D458","R10","U736","L317","D145","R902","D428","R344","U334","R131","D739","R438","D376","L652","U304","L332","D452","R241","D783","R82","D317","R796","U323","R287","D487","L302","D110","R233","U631","R584","U973","L878","D834","L930","U472","R120","U78","R806","D21","L521","U988","R251","D817","R44","D789","R204","D669","R616","D96","R624","D891","L532","U154","R438","U469","R785","D431","R945","U649","R670","D11","R840","D521","L235","D69","L551","D266","L454","U807","L885","U590","L647","U763","R449","U194","R68","U809","L884","U962","L476","D648","L139","U96","L300","U351","L456","D202","R168","D698","R161","U834","L273","U47","L8","D157","L893","D200","L454","U723","R886","U92","R474","U262","L190","U110","L407","D723","R786","D786","L572","D915","L904","U744","L820","D663","R205","U878","R186","U247","L616","D386","R582","U688","L349","D399","R702","U132","L276","U866","R851","D633","R468","D263","R678","D96","L50","U946","R349","D482","R487","U525","R464","U977","L499","D187","R546","U708","L627","D470","R673","D886","L375","U616","L503","U38","L775","D8","L982","D556","R159","U680","L124","U777","L640","D607","R248","D671","L65","D290","R445","U778","L650","U679","L846","D1","L769","U659","R734","D962","R588","U178","R888","D753","R223","U318","L695","D586","R430","D61","R105","U801","R953","U721","L856","U769","R937","D335","R895"}

	var wire1Points = map[gridPoint]int64{}
	var wire2Points = map[gridPoint]int64{}

	calculateWire(wire1Points, wire1)
	calculateWire(wire2Points, wire2)
	var overlaps = calculateOverlap(wire1Points, wire2Points)

	var distance int64 = math.MaxInt64
	var totalSteps int64 = math.MaxInt64
	for overlap, steps := range overlaps {
		var pointDistance = Abs(overlap.x) + Abs(overlap.y)
		if pointDistance < distance {
			distance = pointDistance
		}
		if steps < totalSteps {
			totalSteps = steps
		}
	}
	fmt.Println(distance)
	fmt.Println(totalSteps)
}

func isPotentialPassword(password int64) (correct bool){
	var strPass string = strconv.FormatInt(password, 10)
	var doubleMap = map[int32]int64{}
	var doublesFound int64 = 0

	var last int64 = 0
	for _, c := range strPass {
		var current, _ = strconv.ParseInt(strconv.FormatInt(int64(c), 10), 10, 32)
		if last > current {
			return false
		}
		doubleMap[c] += 1
		// This if statement is only useful for part 2
		if doubleMap[c] == 3 {
			doublesFound--
		}
		if doubleMap[c] == 2 {
			doublesFound++
		}
		last = current
	}
	// If we have made it this far, the only criteria left is if there are doubles somewhere in there
	return doublesFound > 0
}

func day4() {
	var possibility, potentials int64
	potentials = 0

	for possibility = 108457; possibility <= 562041; possibility++ {
		if isPotentialPassword(possibility) {
			potentials++
		}
	}
	fmt.Println(potentials)
}

func day5() {
	rawcodes := []int64{3,225,1,225,6,6,1100,1,238,225,104,0,1101,48,82,225,102,59,84,224,1001,224,-944,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1101,92,58,224,101,-150,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1102,10,89,224,101,-890,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,1101,29,16,225,101,23,110,224,1001,224,-95,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1102,75,72,225,1102,51,8,225,1102,26,16,225,1102,8,49,225,1001,122,64,224,1001,224,-113,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1102,55,72,225,1002,174,28,224,101,-896,224,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1102,57,32,225,2,113,117,224,101,-1326,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1,148,13,224,101,-120,224,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,677,226,224,102,2,223,223,1006,224,329,101,1,223,223,107,677,677,224,1002,223,2,223,1006,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,107,226,226,224,102,2,223,223,1005,224,374,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,107,677,226,224,102,2,223,223,1006,224,404,1001,223,1,223,1107,226,677,224,1002,223,2,223,1006,224,419,1001,223,1,223,108,677,677,224,102,2,223,223,1005,224,434,1001,223,1,223,1008,677,226,224,1002,223,2,223,1006,224,449,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,464,1001,223,1,223,1007,677,677,224,102,2,223,223,1005,224,479,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,494,1001,223,1,223,108,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1007,226,677,224,1002,223,2,223,1006,224,524,101,1,223,223,1107,677,677,224,102,2,223,223,1005,224,539,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,554,1001,223,1,223,108,677,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,584,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,599,1001,223,1,223,1008,226,226,224,102,2,223,223,1006,224,614,101,1,223,223,7,677,677,224,1002,223,2,223,1006,224,629,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,644,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,659,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226}
	var codes = make([]int64, len(rawcodes))
	copy(codes, rawcodes)
	runIntComp(codes, gatherInputFromUser, printOutputHandler)
}

type orbit struct {
	orbiting  string
	centering []string
}

func (n *orbit) SetOrbiting(value string) {
	n.orbiting = value
}

func (n *orbit) AppendCentering(value string) {
	n.centering = append(n.centering, value)
}

func getOrbitMapDistances(orbits map[string]orbit, center string, depth int64) (direct int64, indirect int64) {
	direct = int64(len(orbits[center].centering))
	indirect = depth * direct
	for _, item := range orbits[center].centering {
		newDirect, newIndirect := getOrbitMapDistances(orbits, item, depth+1)
		direct += newDirect
		indirect += newIndirect
	}

	return direct, indirect
}

func day6() {
	file, err := os.Open("./day6-input.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	var orbits = map[string]orbit{}
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		var rawOrbit string
		rawOrbit = scanner.Text()
		orbitRelationship := strings.Split(rawOrbit,")")
		if _, ok := orbits[orbitRelationship[0]]; ! ok {
			orbits[orbitRelationship[0]] = orbit{"", []string{}}
		}
		if _, ok := orbits[orbitRelationship[1]]; ! ok {
			orbits[orbitRelationship[1]] = orbit{orbitRelationship[0], []string{}}
		} else {
			thisOrbit := orbits[orbitRelationship[1]]
			thisOrbit.SetOrbiting(orbitRelationship[0])
			orbits[orbitRelationship[1]] = thisOrbit
		}
		thisOrbit := orbits[orbitRelationship[0]]
		thisOrbit.AppendCentering(orbitRelationship[1])
		orbits[orbitRelationship[0]] = thisOrbit
	}

	direct, indirect := getOrbitMapDistances(orbits, "COM", 0)
	fmt.Println("Total orbits:", direct + indirect)

	var youBackwards = map[string]int64{}
	var i int64
	var current string
	var found bool

	found = true
	current = "YOU"
	for i = -1; found; i++ {
		fmt.Println("Current:", current)
		youBackwards[current] = i
		current = orbits[current].orbiting
		if current == "COM" {
			found = false
		}
	}
	fmt.Println("Transfers from COM", youBackwards["COM"])

	current = "SAN"
	found = true
	var total int64
	for i = 0; found; i++ {
		current = orbits[current].orbiting
		if _, ok := youBackwards[current]; ok {
			total = youBackwards[current] + i
			found = false
		}
	}
	fmt.Println("Total orbit transfers", total)
}

func generateCombinationsOfInts(initial []int64) (allCombos [][]int64) {
	var rc func([]int64, int64)
	rc = func(a []int64, k int64) {
		if k == int64(len(a)) {
			allCombos = append(allCombos, append([]int64{}, a...))
		} else {
			for i := k; i < int64(len(initial)); i++ {
				a[k], a[i] = a[i], a[k]
				rc(a, k+1)
				a[k], a[i] = a[i], a[k]
			}
		}
	}
	rc(initial, 0)

	return allCombos
}

func generatePrimedIOHandlers(inputs []int64) (forInput inputGatherer, forOutput outputHandler, getLastOutput func() int64) {
	var current int64
	var lastOutput int64
	forInput = func() (nextInput int64){
		nextInput = inputs[current]
		current++
		return nextInput
	}
	forOutput = func(output int64) {
		lastOutput = output
		if current < int64(len(inputs)) {
			inputs = append(inputs[:current+1], append([]int64{output}, inputs[current+1:]...)...)
		}
	}
	getLastOutput = func() int64 {
		return lastOutput
	}
	return forInput, forOutput, getLastOutput
}

func generateContinuousIOHandlers(phase int64, inputChan chan int64, outputChan chan int64, ampNum int64) (forInput inputGatherer, forOutput outputHandler, getLastOutput func() int64) {
	var phaseGiven = false
	var lastOutput int64
	forInput = func() (nextInput int64){
		if ! phaseGiven {
			phaseGiven = true
			return phase
		}
		nextInput = <- inputChan
		return nextInput
	}
	forOutput = func(output int64) {
		lastOutput = output
		outputChan <- output
	}
	getLastOutput = func() int64 {
		return lastOutput
	}
	return forInput, forOutput, getLastOutput
}

func runAmplifier(amplifier int, codes []int64, inputFunc inputGatherer, outputFunc outputHandler, finished chan bool) {
	runIntComp(codes, inputFunc, outputFunc)
	finished <- true
}

func day7() {
	rawCodes := []int64{3,8,1001,8,10,8,105,1,0,0,21,46,55,68,89,110,191,272,353,434,99999,3,9,1002,9,3,9,1001,9,3,9,102,4,9,9,101,4,9,9,1002,9,5,9,4,9,99,3,9,102,3,9,9,4,9,99,3,9,1001,9,5,9,102,4,9,9,4,9,99,3,9,1001,9,5,9,1002,9,2,9,1001,9,5,9,1002,9,3,9,4,9,99,3,9,101,3,9,9,102,3,9,9,101,3,9,9,1002,9,4,9,4,9,99,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99}
	var codes = make([]int64, len(rawCodes))
	var allInputs [][]int64
	var bestInput []int64
	var largestResult int64

	allInputs = generateCombinationsOfInts([]int64{0,1,2,3,4})
	bestInput = []int64{0,1,2,3,4}
	for _, inputSet := range allInputs {
		var potentialBestInputs = make([]int64, len(inputSet))
		copy(potentialBestInputs, inputSet)
		inputSet = append(inputSet[:1], append([]int64{0}, inputSet[1:]...)...)
		gatherer, outputFunc, getLastOutput := generatePrimedIOHandlers(inputSet)
		copy(codes, rawCodes)

		for i := 0; i < 5; i++ {
			runIntComp(codes, gatherer, outputFunc)
		}
		if getLastOutput() > largestResult {
			largestResult = getLastOutput()
			bestInput = potentialBestInputs
		}
	}
	fmt.Println("Best input:", bestInput, "Value:", largestResult)

	// testInput := []int64{3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5}
	allInputs = generateCombinationsOfInts([]int64{5,6,7,8,9})
	bestInput = []int64{5,6,7,8,9}
	largestResult = 0
	for _, inputSet := range allInputs {
		var potentialBestInput = make([]int64, len(inputSet))
		copy(potentialBestInput, inputSet)

		var inputGatherers = make([]inputGatherer, 5)
		var outputFunctions = make([]outputHandler, 5)
		var ampChannels = make([]chan int64, 5)
		var finished = make([]chan bool, 5)
		var lastOutputOfE = func() int64 {return -1}

		for i := 0; i < 5; i++ {
			ampChannels[i] = make(chan int64, 10)
		}

		for i := 0; i < 5; i++ {
			var inputChannel = ampChannels[i]
			var outputChannel = ampChannels[(i+1)%5]
			gatherer, outputFunc, getLastOutput := generateContinuousIOHandlers(inputSet[i], inputChannel, outputChannel, int64(i))
			inputGatherers[i] = gatherer
			outputFunctions[i] = outputFunc
			// We only need the output of E at the end
			if i == 4 {
				lastOutputOfE = getLastOutput
			}
		}
		// A separate loop since we have to have the handlers generated
		for i := 0; i < 5; i++ {
			var finisher = make(chan bool)
			finished[i] = finisher
			var copiedcodes = make([]int64, len(rawCodes))
			copy(copiedcodes, rawCodes)
			go runAmplifier(i, copiedcodes, inputGatherers[i], outputFunctions[i], finisher)
		}
		ampChannels[0] <- 0
		for i := 0; i < 5; i++ {
			<- finished[i]
		}

		if lastOutputOfE() > largestResult {
			largestResult = lastOutputOfE()
			bestInput = potentialBestInput
		}
	}
	fmt.Println("Best feedback input:", bestInput, "Value:", largestResult)
}

type layerStats struct {
	layer int
	zeroes int
	ones int
	twos int
	data []int
}

func (n *layerStats) SetZeroes(value int) {
	n.zeroes = value
}
func (n *layerStats) SetLayer(value int) {
	n.zeroes = value
}
func (n *layerStats) SetOnes(value int) {
	n.ones = value
}
func (n *layerStats) SetTwos(value int) {
	n.twos = value
}


func calcPixel(pixels []int) int {
	for _, pixel := range pixels {
		switch pixel {
		case 0:
			return 0
		case 1:
			return 1
		}
	}
	return 2
}

func day8() {
	rawDigits := []int{1,1,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,0,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,1,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,0,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,0,2,2,2,0,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,1,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,1,2,2,2,2,2,2,1,2,2,2,0,2,1,0,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,1,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,0,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,0,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,0,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,1,2,0,0,2,2,2,2,2,0,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,1,2,1,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,1,1,2,0,1,2,2,2,2,0,0,2,2,1,2,2,2,2,2,2,1,0,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,0,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,0,2,1,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,0,2,2,2,0,2,0,2,2,2,2,2,2,2,2,0,1,2,1,1,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2,1,1,2,2,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,0,1,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,2,1,0,2,2,2,2,0,0,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,1,2,1,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,0,2,1,2,2,2,2,2,2,2,2,1,1,2,0,0,2,2,2,2,0,2,2,2,1,2,2,2,2,2,2,0,2,2,2,1,2,0,0,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,0,2,2,2,2,2,2,0,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,1,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,1,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,0,2,1,2,2,2,2,2,2,2,2,1,0,2,0,1,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,0,2,0,0,2,1,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,0,1,2,0,2,2,1,0,2,2,1,2,2,2,2,2,2,1,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,0,1,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,1,2,1,1,2,0,2,0,2,1,2,2,2,2,2,2,2,2,2,0,1,2,2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,1,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,1,2,2,2,2,2,2,2,0,2,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,1,0,2,2,0,2,2,2,2,2,2,1,1,2,2,1,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,0,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,1,2,1,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,0,2,2,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,0,2,2,0,2,1,1,2,2,2,1,2,2,2,2,2,2,2,0,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,0,2,0,2,1,2,2,2,2,2,2,0,0,1,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,0,2,2,2,2,2,2,2,2,2,2,1,0,2,1,1,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,0,0,2,1,2,1,2,2,2,2,2,2,2,2,2,0,2,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,1,2,2,2,2,2,1,2,2,2,2,1,1,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,2,2,0,1,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,0,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,2,2,0,2,2,2,2,2,2,2,2,1,1,2,1,0,2,1,2,1,1,1,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,2,2,0,2,2,2,1,2,0,2,1,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,1,1,2,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,0,2,2,1,1,2,2,1,2,2,2,2,2,2,0,0,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,2,0,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,2,2,2,1,2,2,2,1,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,1,0,2,1,1,2,2,2,1,1,1,2,2,0,2,2,2,2,2,2,1,1,2,2,2,2,1,1,2,1,2,1,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,0,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,1,1,2,2,2,0,2,1,2,2,2,2,2,2,2,2,0,0,2,0,0,2,1,2,2,1,1,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,1,2,2,2,0,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,0,0,2,2,2,2,2,0,2,2,2,2,2,2,2,1,2,1,2,1,2,2,2,2,2,2,2,2,0,1,2,0,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,0,2,2,2,0,2,1,2,2,0,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,0,2,2,2,2,2,1,0,2,2,2,0,1,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,0,1,2,0,2,0,1,1,2,2,0,2,2,2,2,2,2,2,2,2,2,1,2,0,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,1,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,1,1,2,2,2,1,0,2,1,2,0,2,1,2,2,2,2,2,2,2,2,2,0,2,1,0,2,2,2,1,0,1,2,2,0,2,2,2,2,2,2,0,1,2,2,1,2,0,0,2,0,2,1,2,2,2,2,2,2,2,2,0,1,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,1,2,1,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,2,1,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,1,0,2,2,2,0,2,2,2,2,1,2,2,2,2,2,2,1,1,2,2,0,2,0,0,2,0,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,2,2,0,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,1,2,2,2,2,1,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,1,2,2,1,0,2,2,2,0,1,2,2,2,1,2,2,2,2,2,2,2,1,2,2,1,2,1,1,2,0,2,1,2,2,2,2,2,2,2,2,0,1,2,2,0,0,2,0,2,1,2,2,2,2,2,2,2,1,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,2,1,2,2,2,2,2,0,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,2,0,2,2,2,1,1,2,2,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,1,1,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,1,1,2,0,2,0,2,2,2,2,2,2,2,2,0,1,2,2,0,0,2,0,2,0,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,0,2,2,1,2,0,2,2,0,2,2,2,2,2,2,2,1,0,2,2,0,2,2,2,2,2,1,0,0,2,2,2,2,1,2,2,2,0,2,2,2,2,2,2,2,1,2,2,1,0,2,1,0,2,1,2,2,0,0,2,2,0,2,2,2,2,2,2,2,2,2,2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,0,0,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,1,2,2,1,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,2,0,1,2,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,2,0,1,2,2,2,1,2,2,2,2,2,2,1,2,2,2,0,2,2,0,2,0,2,1,2,2,2,2,2,2,2,2,1,1,2,2,1,0,2,0,2,2,2,2,1,2,2,2,0,1,0,2,2,2,2,2,2,0,2,0,2,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,1,2,0,2,2,2,0,1,2,0,2,0,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,2,1,0,1,0,0,2,2,1,2,2,2,2,2,2,1,2,2,2,0,2,2,0,2,0,2,1,2,2,2,2,2,2,2,2,0,0,2,2,1,1,2,1,2,2,2,2,0,2,2,2,0,1,1,2,2,2,2,2,2,2,2,0,2,2,1,1,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,1,2,0,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,1,0,2,2,1,0,2,2,2,2,1,0,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,0,2,1,0,2,2,0,2,1,0,2,2,0,2,2,2,2,2,2,1,0,2,2,0,2,1,1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,1,0,2,2,2,2,0,0,2,2,2,2,1,2,2,0,2,1,2,2,2,2,2,2,2,0,2,2,0,1,2,2,0,2,2,1,0,1,0,2,2,0,2,2,2,2,2,2,0,0,2,2,1,2,2,2,2,0,2,1,2,2,2,2,2,2,2,2,0,0,2,2,0,1,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,1,2,0,2,2,0,0,2,2,2,2,2,1,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,0,1,2,2,0,2,2,2,2,2,1,0,1,2,2,2,2,2,2,0,2,0,2,0,2,2,2,2,2,2,2,2,0,2,2,0,0,2,2,1,2,0,1,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,0,1,2,2,2,1,2,2,2,2,2,2,2,2,0,2,2,2,1,0,2,1,2,1,2,2,2,2,2,2,0,0,1,2,2,2,2,2,2,0,2,1,2,2,0,0,2,2,2,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,1,2,2,2,2,0,2,0,2,2,2,0,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,0,0,0,2,0,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,1,2,2,2,2,2,2,2,2,0,1,2,2,1,1,2,2,2,0,2,2,2,2,2,2,1,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,0,2,2,2,2,2,1,2,1,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,0,2,2,2,2,0,2,2,1,2,2,0,0,2,1,0,2,2,1,2,1,1,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,0,2,1,2,2,1,2,2,2,0,2,0,2,1,2,2,2,2,1,2,2,2,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,0,0,2,2,1,0,2,2,2,2,2,0,1,2,2,2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,1,0,2,1,0,1,1,1,2,2,1,2,2,2,2,2,2,1,0,2,2,1,2,0,0,2,0,2,0,2,2,2,2,2,2,2,2,0,0,2,2,0,1,2,0,2,2,2,2,0,2,2,2,0,0,0,2,1,2,0,2,2,0,2,2,2,1,0,2,2,2,2,2,2,1,2,2,1,2,2,2,1,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,1,2,1,2,2,2,2,1,2,2,1,2,1,2,2,2,2,2,0,2,2,2,1,0,0,2,2,2,1,1,1,2,2,2,2,2,2,0,2,1,2,1,2,2,2,2,2,0,2,2,1,0,2,0,1,2,0,2,1,0,0,2,2,2,2,2,2,2,2,2,1,1,0,0,0,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,2,2,0,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,1,1,2,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,1,2,2,2,2,1,2,2,1,2,0,1,2,2,2,2,0,2,2,2,0,2,1,2,2,2,1,1,2,2,2,2,2,2,2,2,2,0,2,1,2,2,2,2,2,1,2,2,0,0,2,1,2,2,2,1,1,0,2,2,2,2,2,2,2,2,2,2,2,1,2,1,1,2,0,0,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,0,2,2,1,2,2,2,2,2,1,2,0,2,0,2,2,0,2,2,2,0,1,2,2,2,2,2,2,0,2,2,1,2,2,1,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,0,2,2,0,2,2,2,2,0,2,0,2,2,2,2,2,1,1,2,2,1,0,0,2,2,2,1,2,1,2,2,2,2,2,2,1,2,1,2,2,2,2,2,2,2,2,2,0,2,1,2,1,2,2,0,2,2,2,1,2,2,0,2,2,2,2,2,2,0,0,1,1,0,2,0,1,2,0,2,0,2,2,2,2,2,2,2,2,2,0,2,2,1,0,2,1,2,2,2,2,2,2,2,2,0,0,0,2,2,2,1,2,2,0,2,0,2,2,1,2,2,2,2,2,2,1,2,2,1,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,0,2,1,2,2,2,2,2,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,0,1,2,1,2,1,2,2,2,2,1,2,2,0,2,2,2,2,2,1,2,2,2,1,0,1,1,2,2,2,2,2,2,2,2,2,0,0,1,0,1,2,0,0,2,1,2,0,2,2,2,2,2,2,2,2,0,0,2,2,2,0,2,0,2,2,2,2,2,2,2,2,1,2,1,2,1,2,0,2,2,1,2,0,2,2,2,1,2,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,1,2,0,2,2,2,2,1,2,2,2,2,2,1,2,2,2,0,0,0,2,2,2,0,0,2,2,2,2,1,1,2,0,2,0,2,1,2,2,2,2,2,0,2,1,1,0,2,0,0,2,0,2,1,1,1,2,2,0,2,2,2,2,2,2,0,0,0,0,1,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,2,1,2,2,2,2,2,2,1,2,1,1,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,1,2,2,1,2,0,2,2,0,2,0,0,2,2,2,2,2,2,2,2,0,1,2,2,2,2,0,2,1,2,2,2,1,1,2,0,2,2,2,2,2,2,1,2,2,2,2,0,1,0,2,0,0,2,2,0,0,1,1,2,2,1,2,2,2,2,2,2,0,0,1,2,0,2,2,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,0,1,0,2,2,2,1,2,2,2,2,2,2,0,1,2,2,2,2,2,2,1,2,2,1,2,2,0,1,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,1,2,2,1,2,1,2,0,2,2,1,1,2,2,2,2,0,1,2,2,0,2,2,2,2,2,1,0,1,2,2,2,1,0,2,2,2,2,2,0,2,2,2,2,2,0,2,1,2,0,2,2,1,2,2,2,2,1,0,2,2,0,2,2,2,2,2,2,1,0,1,0,0,2,0,1,2,1,2,1,2,2,2,2,2,2,2,2,2,1,2,2,0,1,2,0,2,2,2,2,0,2,2,2,0,0,2,2,2,2,1,2,2,0,2,1,2,1,2,0,2,2,2,2,2,0,2,2,2,2,2,2,1,2,2,2,1,2,2,2,0,2,1,2,2,2,2,2,0,2,0,2,2,0,2,1,2,2,2,2,1,1,2,2,2,2,1,2,2,2,1,2,0,2,2,2,0,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,2,2,2,2,0,2,1,2,0,2,2,0,2,2,2,2,2,2,0,0,2,0,1,2,0,1,2,0,2,1,2,2,2,2,2,2,2,2,1,1,2,2,1,2,2,1,2,0,2,2,0,2,2,2,1,1,1,2,0,2,1,2,2,1,2,0,2,1,1,1,2,2,2,2,2,0,2,2,1,2,2,0,1,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,0,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,0,1,2,2,1,1,0,2,2,2,0,1,2,2,2,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,0,0,1,2,0,2,2,0,1,2,2,1,2,2,2,2,2,2,2,2,2,0,1,0,0,2,2,1,2,2,2,2,0,2,2,2,2,2,2,1,2,0,1,2,2,2,0,2,0,2,1,2,2,0,2,2,2,0,2,0,2,0,2,0,2,2,1,2,2,2,1,1,1,2,2,2,2,2,0,2,2,1,2,2,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,0,2,0,1,2,0,2,2,2,2,2,1,0,2,2,0,1,0,2,2,2,1,2,1,2,2,2,2,2,2,0,2,1,2,1,2,2,2,2,2,1,2,2,1,1,2,2,1,2,2,1,0,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,1,2,0,2,2,2,1,0,2,1,2,2,2,2,1,2,2,2,2,1,1,2,1,2,0,2,2,2,2,2,2,2,1,0,2,2,2,2,2,1,2,2,0,2,2,2,2,2,2,2,1,2,2,2,0,2,2,2,2,0,2,2,1,2,1,2,2,2,2,2,2,2,1,2,0,1,2,2,2,2,0,0,2,2,1,2,1,2,2,2,2,2,1,2,2,2,0,0,2,0,2,1,2,0,2,2,0,2,2,2,2,0,0,0,2,1,2,2,2,1,0,2,1,2,2,0,2,2,2,2,2,2,2,1,0,2,0,2,0,0,2,1,2,2,2,2,2,2,2,2,2,2,0,0,2,2,0,2,2,0,2,1,2,2,0,2,2,2,0,0,1,2,0,2,0,2,2,2,2,0,2,2,1,2,2,2,2,2,2,0,2,2,0,2,2,0,0,2,2,2,0,2,2,2,1,2,0,2,2,0,2,2,1,2,2,2,2,0,2,0,2,2,0,2,2,1,2,2,2,2,2,1,2,2,1,2,0,2,2,2,0,0,1,2,2,2,1,0,2,2,2,0,2,1,2,2,1,2,2,1,2,1,1,0,2,0,1,2,2,1,0,1,1,2,2,2,2,2,2,2,2,2,2,2,0,1,1,2,2,2,2,0,2,1,2,2,2,2,2,2,0,2,1,2,2,2,0,0,2,0,2,1,2,2,2,0,2,2,1,2,0,2,0,2,0,2,2,2,2,2,2,2,0,1,2,2,2,2,2,2,2,2,0,2,2,2,1,2,2,2,0,2,2,2,0,2,0,2,2,1,2,2,1,2,1,2,2,0,2,0,2,2,1,2,0,1,2,0,2,2,1,0,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,0,2,0,2,0,2,2,2,2,2,2,2,1,2,0,0,2,2,2,2,2,2,2,0,0,1,2,2,1,2,2,2,2,2,2,2,2,0,2,1,2,2,1,2,1,2,1,2,2,2,2,2,2,0,2,1,1,2,2,0,0,2,0,2,1,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,0,2,1,2,1,1,1,2,2,2,2,2,1,2,2,1,2,2,2,0,2,2,2,1,2,2,2,1,2,2,2,2,2,2,2,0,2,1,2,2,2,2,2,2,2,1,2,2,2,2,0,2,2,1,2,2,2,0,0,0,2,2,2,1,2,0,2,2,2,0,1,2,2,2,0,2,1,2,2,1,2,2,2,2,2,1,0,2,2,2,2,2,0,0,2,1,2,2,0,2,2,2,2,2,2,1,0,0,0,0,2,2,0,2,1,2,2,2,2,2,2,2,2,2,2,0,0,2,2,1,1,2,1,2,2,2,2,2,0,2,2,1,2,2,2,1,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,2,1,0,2,0,2,2,1,2,2,2,2,1,2,1,2,0,0,2,0,0,2,1,2,2,1,0,2,2,2,0,0,2,2,2,0,2,1,2,2,2,1,2,2,0,2,2,2,1,2,2,2,2,2,0,2,0,1,0,2,0,2,2,0,0,1,1,1,2,2,2,2,2,2,2,2,2,0,2,2,0,1,2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,0,0,2,2,1,2,2,0,2,0,2,2,1,0,2,2,1,1,1,2,2,2,2,2,2,2,2,1,2,2,1,0,2,2,0,2,2,0,2,2,1,2,2,0,1,2,2,2,1,2,2,2,1,2,1,0,2,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,2,2,2,1,2,2,1,2,2,2,0,0,1,2,2,2,0,0,1,2,2,2,0,1,2,2,2,1,2,2,2,2,0,2,2,1,2,1,2,2,2,0,0,2,1,1,1,1,2,2,2,1,2,2,2,2,2,2,2,2,0,0,1,2,0,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,1,2,0,2,2,1,1,2,2,0,2,2,2,0,2,1,2,2,2,2,1,2,1,1,2,2,2,2,2,2,0,2,2,0,2,2,2,1,2,2,2,1,2,0,2,2,2,2,2,2,0,2,2,0,2,1,2,2,1,2,0,2,0,2,2,2,2,2,0,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,1,1,2,0,2,1,2,0,2,2,2,2,2,0,2,0,1,1,2,0,2,2,1,1,2,1,0,2,2,1,2,2,2,2,1,2,2,2,0,2,1,2,1,1,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,1,2,2,1,1,2,2,1,0,0,2,2,2,0,2,2,0,2,1,2,0,1,1,2,2,0,2,2,2,2,2,0,2,2,2,2,2,2,0,0,2,2,2,2,2,1,2,2,1,2,2,0,2,1,2,2,1,2,2,2,1,2,2,2,2,2,1,2,2,1,1,2,2,1,0,0,2,0,2,0,2,1,2,2,2,0,2,2,0,2,2,2,1,2,2,2,2,2,2,2,1,0,0,2,0,1,2,2,1,2,1,2,2,2,2,2,2,2,2,0,2,2,0,1,0,0,2,2,0,2,1,2,0,2,2,2,2,2,2,1,2,1,2,2,2,0,0,2,0,2,1,2,2,2,1,2,2,1,0,1,2,2,2,0,2,2,0,2,1,2,0,0,2,2,2,0,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,1,2,0,2,0,2,2,0,2,2,1,2,0,2,2,1,2,0,2,1,0,2,2,0,2,2,2,2,2,1,2,2,0,0,1,2,2,2,0,1,1,2,2,2,2,0,2,2,2,0,2,0,2,2,1,2,2,0,2,2,0,2,2,0,0,2,2,1,1,0,1,2,2,2,2,2,1,2,2,2,0,2,1,2,2,2,1,0,2,1,2,2,2,2,2,2,2,2,1,2,2,0,2,2,2,2,2,2,2,1,2,2,2,1,2,2,0,2,1,2,0,2,0,2,2,0,2,1,2,0,1,2,2,2,0,2,2,0,2,2,0,2,2,1,1,2,2,1,0,2,2,2,1,2,0,1,2,2,2,2,1,2,0,2,2,1,2,0,2,0,0,2,0,1,2,2,2,2,0,0,2,2,2,0,0,2,0,2,0,1,2,2,2,2,1,1,2,0,2,1,2,1,0,2,0,2,2,2,2,0,0,2,2,0,2,2,2,1,2,0,2,2,2,1,2,2,1,2,2,2,0,1,2,0,2,2,1,1,2,0,2,1,2,2,2,2,2,2,0,2,2,1,2,2,0,1,2,1,2,0,2,2,0,0,2,2,0,2,0,2,0,2,0,2,2,1,2,1,2,2,0,1,2,2,0,2,2,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,1,1,2,1,2,2,2,2,0,2,2,2,2,1,2,1,0,2,2,2,2,0,2,2,1,2,2,0,2,2,0,2,0,2,2,2,1,2,2,2,0,1,0,1,2,2,2,2,2,2,1,2,2,1,2,1,0,0,2,1,1,2,2,1,1,1,0,2,2,0,2,2,2,2,2,2,1,2,2,1,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,1,0,2,2,1,0,2,0,2,0,2,2,2,1,2,2,0,2,2,2,0,2,0,2,2,1,2,2,2,0,0,1,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,0,2,2,2,2,2,2,2,1,2,0,2,2,1,2,0,2,2,2,2,0,2,1,1,2,2,1,2,1,2,2,2,1,2,2,1,0,0,2,2,2,0,1,1,2,2,2,2,2,0,1,2,2,2,1,2,2,0,2,2,1,2,0,0,1,2,2,1,2,1,1,2,0,1,2,2,0,2,2,2,2,0,2,0,0,0,0,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,2,0,1,2,2,1,0,2,2,2,0,2,2,0,2,2,2,1,0,1,2,1,2,0,2,2,1,2,2,2,0,0,1,2,2,1,2,2,0,2,2,0,2,2,1,0,2,2,0,1,2,2,2,1,2,0,1,2,0,2,2,1,2,1,2,2,1,2,2,2,1,2,2,2,2,2,2,2,2,1,2,2,1,2,2,1,2,1,2,0,0,0,2,2,2,1,0,0,1,2,2,2,0,1,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,0,1,0,2,2,1,2,2,1,2,1,2,2,2,2,0,1,1,2,0,2,1,2,1,2,2,2,2,2,2,1,2,2,0,2,2,0,2,2,1,2,2,2,2,0,2,2,2,2,1,1,2,2,2,0,2,2,2,2,2,2,2,0,0,2,2,0,2,2,0,2,2,0,2,2,2,2,2,2,2,2,2,0,2,0,2,2,1,2,2,2,2,0,2,1,2,2,1,2,2,2,1,1,2,2,2,2,2,2,2,0,1,2,2,0,2,0,2,2,2,2,1,2,2,2,2,1,1,0,0,2,0,2,2,0,2,1,2,2,2,2,1,1,1,2,2,2,2,0,0,1,0,2,2,2,1,2,2,2,2,0,2,2,0,2,2,2,1,0,2,2,2,2,1,2,2,2,2,0,2,2,2,2,0,2,2,0,1,2,2,2,0,2,2,2,1,2,2,2,0,2,2,0,2,1,1,2,0,2,1,2,0,2,2,2,2,0,2,2,2,2,2,0,2,2,1,2,2,2,0,1,2,0,2,2,2,1,2,2,1,2,2,2,2,2,2,2,0,2,2,2,1,0,2,1,2,2,2,2,2,2,1,2,1,1,0,2,2,2,2,0,0,1,2,2,2,1,2,1,0,2,0,2,2,2,2,0,2,2,1,2,0,2,2,2,0,1,2,1,0,0,1,2,2,2,2,2,2,2,2,0,2,2,0,0,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,2,2,2,1,0,1,2,0,2,1,0,2,2,2,1,2,2,1,0,2,2,0,2,2,1,2,2,0,2,2,2,1,2,2,0,0,2,1,2,1,2,1,1,2,2,2,2,2,2,0,2,2,0,2,0,2,0,0,2,0,0,2,0,2,2,0,1,2,1,1,1,1,2,2,2,2,1,1,2,2,2,2,0,2,2,2,1,2,0,2,2,0,2,2,0,2,0,2,0,0,2,1,2,0,1,1,1,1,2,2,2,2,2,1,2,2,2,0,2,2,2,2,1,0,1,2,1,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,0,2,0,2,0,2,2,0,0,2,2,2,1,2,2,2,2,1,1,2,1,2,0,2,2,1,0,2,2,0,2,2,0,2,2,2,2,2,0,1,2,2,2,2,2,0,2,1,2,0,1,2,2,2,2,2,2,0,2,2,2,2,0,2,2,1,2,0,1,0,1,2,2,0,1,2,2,1,2,0,2,0,2,0,1,0,2,2,2,2,0,2,0,2,1,2,0,0,2,1,2,2,0,2,1,1,0,2,0,2,2,2,2,2,0,1,2,2,0,2,2,1,2,2,2,0,0,2,2,0,2,0,0,2,2,2,1,2,2,2,2,1,2,1,2,1,0,2,2,1,2,0,1,2,0,2,2,0,1,2,2,0,1,0,0,2,2,2,0,2,2,2,2,2,1,0,0,2,2,1,2,2,0,2,2,0,2,2,2,2,2,2,0,2,2,1,2,2,2,2,0,2,0,2,2,0,2,1,2,2,1,2,2,2,2,0,2,2,1,1,2,2,2,0,0,2,2,0,2,0,2,1,2,1,0,1,2,2,2,2,2,2,0,2,0,2,1,0,2,1,2,2,2,2,2,2,1,0,1,1,2,0,2,1,1,0,2,2,1,2,2,1,2,0,2,2,1,0,2,1,2,2,1,2,1,2,1,2,2,2,2,1,2,2,2,1,0,2,2,0,1,0,2,2,2,2,2,2,0,2,2,0,2,0,2,2,2,2,0,2,0,2,0,2,0,1,2,2,2,0,2,2,2,2,2,0,2,2,1,1,2,2,0,1,2,0,2,1,2,1,0,2,2,2,2,0,2,1,2,2,1,2,2,2,2,1,2,1,0,2,2,2,2,1,2,2,1,2,2,2,2,0,2,2,0,1,2,2,2,0,0,0,1,2,1,2,2,1,2,2,2,2,2,2,1,1,0,1,2,2,2,0,0,1,1,0,2,2,0,2,2,2,2,1,2,0,1,2,0,2,0,1,1,2,0,2,2,2,2,2,2,0,2,1,2,1,1,2,2,2,0,0,0,2,0,2,2,1,1,2,2,0,0,1,1,1,2,1,1,2,1,2,1,2,2,0,0,2,2,0,2,2,1,2,2,1,2,2,1,1,2,2,0,1,2,2,2,2,2,0,2,2,0,2,2,0,2,2,2,2,2,2,2,2,2,2,2,1,0,2,0,2,2,1,2,2,0,0,2,0,2,0,2,0,2,2,2,2,2,2,0,1,0,2,1,2,1,2,2,2,2,2,2,2,0,2,0,2,2,0,2,1,0,1,2,2,2,2,2,2,2,0,2,2,2,1,0,1,1,2,0,1,1,2,1,2,1,2,2,2,2,0,2,2,2,2,0,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,2,1,0,1,2,1,2,2,2,2,1,2,2,1,1,2,2,0,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,1,2,2,2,1,1,1,2,2,2,1,2,1,2,2,1,2,2,2,0,2,2,0,0,0,0,2,2,0,0,2,2,1,1,1,2,0,2,0,2,1,2,2,2,1,2,2,0,2,1,2,2,2,2,1,2,2,0,2,1,2,0,1,1,1,2,2,2,1,2,0,2,2,2,2,2,1,2,2,2,2,0,0,2,0,1,0,0,2,0,2,2,2,2,2,2,0,2,0,2,2,1,2,2,2,1,2,2,2,2,2,2,2,0,2,2,0,0,2,2,1,2,0,2,2,0,2,1,2,0,1,1,2,2,0,2,2,2,2,2,0,2,2,1,1,2,2,0,2,2,2,2,2,2,0,2,2,2,2,2,1,1,2,2,2,0,2,2,2,0,1,2,0,2,1,0,2,2,0,0,2,2,0,2,0,2,0,2,0,0,0,2,2,2,0,1,1,0,2,1,2,2,1,2,1,2,2,2,2,0,2,2,0,2,2,2,1,1,0,0,1,2,2,0,2,2,1,2,2,2,1,2,0,0,0,1,2,1,2,1,2,1,2,2,2,2,2,2,2,2,1,0,2,2,0,1,1,0,2,1,2,2,0,2,2,2,1,1,0,1,1,2,1,2,2,1,2,0,2,0,0,1,2,2,0,2,2,2,2,2,0,2,2,0,2,2,2,2,2,2,1,2,0,2,2,1,1,0,2,2,0,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,0,2,0,2,0,1,2,1,2,0,1,2,2,2,2,1,0,0,1,2,0,2,0,1,2,0,2,2,1,2,2,1,0,2,1,2,2,1,0,0,2,0,2,0,1,2,2,0,2,1,2,0,2,0,1,2,2,1,0,2,1,2,1,2,2,2,2,0,2,0,2,2,2,2,2,0,2,0,0,2,2,2,2,2,1,2,2,0,0,1,1,0,2,1,2,2,0,2,0,2,0,1,1,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,0,2,2,2,1,2,0,2,2,0,2,2,0,2,2,2,2,2,2,0,2,2,2,2,1,0,0,1,2,2,0,1,2,2,1,0,0,2,0,2,2,0,0,2,2,2,1,2,1,0,2,0,2,1,0,2,0,2,2,2,2,2,1,0,2,2,1,2,2,1,1,0,2,2,2,1,2,2,1,2,2,2,2,0,1,2,0,1,1,0,2,1,2,2,2,2,2,2,1,2,1,2,2,2,2,2,1,1,1,0,2,2,2,2,0,2,0,2,2,0,1,1,0,2,1,0,2,0,2,2,2,2,1,1,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,0,2,1,2,1,2,1,2,1,0,2,2,1,1,0,2,2,0,2,1,2,1,1,2,1,0,1,0,2,2,2,2,2,0,2,1,0,2,0,2,0,1,2,2,2,2,2,2,0,0,2,2,2,2,0,2,1,2,2,2,2,0,1,0,1,2,2,2,2,2,1,2,1,2,0,2,2,2,1,2,2,2,1,0,1,0,1,2,1,0,2,1,2,2,2,2,2,2,0,2,2,2,1,2,2,2,1,1,2,2,2,0,2,2,1,1,1,2,1,2,1,2,0,2,1,2,2,0,2,0,2,0,0,1,2,2,1,2,2,2,2,2,0,2,2,2,2,2,2,0,2,2,1,2,0,2,2,1,1,2,2,2,2,2,2,2,2,2,2,0,2,0,0,2,0,2,2,2,2,2,0,1,2,2,1,1,2,2,2,2,0,2,1,2,2,2,1,0,2,2,2,2,2,0,1,2,0,2,2,2,2,1,1,0,0,2,1,2,1,1,0,2,2,2,2,1,2,2,1,2,0,2,1,0,2,0,0,0,0,0,2,2,2,2,2,2,2,2,1,2,0,2,2,2,2,1,0,2,1,1,2,1,2,2,2,1,1,2,0,2,2,1,2,2,0,0,2,0,2,0,2,2,0,1,2,2,1,2,2,1,2,2,0,2,2,2,1,2,2,0,2,2,1,2,2,2,0,0,0,1,2,2,2,1,2,2,2,0,2,0,2,1,2,2,2,2,0,2,2,2,2,0,2,0,2,2,0,2,0,2,2,0,1,0,2,2,0,1,2,2,2,0,2,0,2,2,1,2,2,0,2,1,2,1,0,1,0,2,2,1,2,1,0,2,2,1,2,2,2,2,2,2,0,0,0,1,1,0,1,1,2,2,2,1,2,2,2,2,1,2,2,2,2,2,2,1,1,0,0,0,2,1,2,2,2,0,1,2,2,2,0,1,2,2,0,2,2,1,2,2,2,0,1,1,2,2,0,2,2,0,2,2,0,2,2,0,1,2,2,1,1,2,2,2,0,2,2,0,0,2,2,2,0,2,0,2,2,1,2,0,2,0,0,2,1,2,1,1,2,2,0,0,0,1,2,1,1,2,1,2,1,0,2,0,2,2,2,1,0,0,2,2,2,1,0,2,1,2,2,0,2,1,0,1,1,0,1,2,1,1,2,0,1,2,0,1,2,2,1,2,0,2,0,2,0,0,2,1,2,2,2,2,2,1,2,2,2,2,0,2,1,2,1,1,2,0,1,0,0,1,0,0,2,2,1,1,0,2,0,2,1,0,1,2,2,2,2,1,2,2,2,0,1,1,2,2,2,2,2,0,2,2,2,2,2,0,0,2,2,1,2,2,0,2,1,2,0,1,0,0,2,2,2,2,2,2,2,0,2,0,2,0,1,2,2,2,0,2,2,2,0,2,0,1,0,1,2,2,2,2,1,2,0,0,2,0,0,0,0,1,2,1,2,1,2,2,1,2,2,1,2,2,0,0,1,1,1,2,2,2,1,1,1,2,1,2,2,2,2,2,0,2,0,2,1,0,2,0,2,0,2,0,2,0,2,2,2,2,0,2,2,2,2,0,2,0,1,0,1,2,2,0,2,2,0,2,2,2,1,1,0,0,0,2,0,1,2,2,2,0,2,0,0,0,2,2,1,2,2,0,2,2,0,2,2,2,0,2,2,1,1,2,2,2,1,2,1,1,2,1,2,2,2,0,2,2,2,2,2,0,2,1,2,2,2,1,0,1,2,2,2,2,1,2,0,1,1,2,1,2,2,0,1,1,2,0,1,2,1,1,2,2,2,1,1,2,2,2,2,0,2,0,1,1,1,2,0,2,0,0,1,1,0,2,0,2,2,2,2,2,0,2,1,0,0,2,2,2,1,0,2,0,2,0,2,2,2,2,2,2,2,2,1,2,2,1,2,1,0,0,0,0,2,2,1,0,0,2,0,1,1,2,2,2,1,0,2,0,2,0,2,1,1,2,2,2,0,2,2,2,2,2,0,2,2,1,0,2,2,0,2,2,0,2,0,2,2,2,2,2,2,2,0,2,2,2,2,0,2,0,2,1,2,2,1,1,0,0,2,2,0,1,1,2,0,0,0,2,0,2,0,1,1,2,2,1,1,1,1,0,2,0,2,0,2,2,2,2,2,1,2,2,1,0,2,1,2,2,1,1,0,1,1,2,1,0,2,2,2,2,1,2,2,2,2,1,0,2,1,1,2,1,2,0,2,2,2,2,0,2,2,2,1,1,2,2,0,1,2,2,1,1,2,2,0,2,2,2,1,1,2,2,0,2,1,0,2,1,2,2,2,0,1,2,2,2,0,2,2,2,2,2,0,2,2,2,1,2,2,0,0,2,0,2,1,2,1,2,2,1,2,2,0,0,2,2,2,1,2,1,2,2,0,2,2,1,1,1,2,2,1,2,0,2,0,2,1,2,2,2,1,2,2,2,0,1,2,2,2,0,2,1,2,1,0,2,1,2,2,1,2,2,1,0,1,0,1,2,0,1,2,0,2,2,1,2,2,2,0,2,0,2,0,0,1,2,1,1,1,1,2,1,2,1,2,2,2,2,1,2,0,2,2,0,2,0,1,2,1,1,1,1,2,2,1,2,1,2,2,2,0,0,0,2,0,2,2,0,2,2,2,1,0,1,2,2,0,2,2,2,2,2,2,2,2,0,2,2,2,1,0,2,0,2,0,2,0,2,0,0,2,2,2,2,1,2,2,2,2,2,2,1,2,2,0,0,0,2,2,2,0,1,0,1,2,0,1,2,1,2,1,0,0,2,1,2,0,0,2,2,2,1,2,1,0,2,1,0,2,0,2,1,0,2,1,1,1,2,2,2,1,2,2,2,2,1,2,2,2,2,0,2,0,2,2,2,2,1,0,2,2,2,2,2,2,2,2,2,1,2,0,2,2,1,2,2,0,0,1,1,1,1,2,2,2,2,1,2,0,0,0,1,2,2,1,0,2,0,2,1,2,0,2,1,0,2,1,2,2,0,2,2,1,2,2,2,0,2,2,1,2,2,1,2,1,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,1,2,2,2,2,0,1,1,1,2,0,0,2,1,0,0,2,0,1,1,2,2,2,1,1,2,1,2,2,2,2,0,0,2,1,2,2,1,0,0,2,2,2,2,2,2,2,0,2,1,2,2,2,0,2,1,2,1,0,1,0,0,2,2,0,2,0,2,1,2,2,2,2,1,2,0,2,0,1,2,2,2,2,2,1,2,2,2,2,2,1,2,2,0,1,2,0,1,2,2,1,2,1,2,1,2,0,0,2,1,2,1,2,2,0,2,2,0,2,2,2,1,2,2,2,0,2,2,2,1,2,0,1,2,1,1,2,0,0,0,2,2,2,2,0,2,1,1,2,1,1,2,0,2,2,0,2,0,0,2,1,0,2,2,2,1,1,1,2,1,2,2,0,0,1,2,0,2,2,2,2,2,0,2,2,2,0,2,2,1,1,2,2,2,0,2,0,2,2,2,0,2,2,2,2,2,2,2,2,0,2,1,1,0,1,2,1,2,1,2,2,2,2,1,2,0,2,2,2,2,0,1,2,2,0,0,2,2,2,2,2,1,2,2,1,1,0,2,2,1,1,2,0,2,2,2,2,0,2,2,2,1,2,2,2,2,2,0,2,2,0,2,2,2,2,2,2,2,2,0,2,2,1,2,2,1,2,0,1,1,2,2,2,2,0,2,1,1,2,0,2,0,1,2,2,0,2,0,2,1,1,1,2,0,1,0,0,1,2,2,1,0,2,1,1,2,2,2,1,0,2,0,0,2,1,2,2,0,2,0,0,2,2,0,0,2,1,1,2,2,0,2,2,2,2,2,2,2,2,1,0,1,0,2,2,2,2,2,2,2,2,2,2,0,2,0,2,1,0,2,1,2,2,1,0,1,2,2,2,1,2,2,2,2,2,2,2,1,2,0,2,2,1,2,0,2,0,1,1,2,2,0,2,2,2,2,2,1,2,2,1,0,2,2,2,0,2,2,2,2,2,1,1,0,2,1,2,2,2,1,2,2,0,2,0,2,1,2,2,1,2,1,1,2,2,2,1,2,1,2,1,1,2,0,0,1,2,1,0,1,2,1,0,0,2,2,2,2,1,0,2,1,0,2,1,2,2,0,1,1,0,0,2,1,2,0,0,2,2,1,2,2,2,1,2,2,2,2,2,1,0,2,0,1,0,2,2,2,2,2,2,2,1,2,2,1,2,2,1,2,2,1,1,1,2,1,0,2,2,1,1,0,2,1,0,1,1,2,2,0,2,2,1,2,2,2,2,2,1,2,2,1,2,2,2,2,2,2,2,2,1,2,2,2,1,0,2,2,2,2,2,2,2,2,1,0,2,0,0,1,2,2,2,2,0,2,2,2,2,1,2,1,0,2,2,2,1,2,1,1,1,0,2,2,0,2,2,1,1,2,0,0,2,2,1,2,1,1,0,0,2,1,2,2,0,2,0,0,1,1,1,2,2,0,1,1,2,2,2,2,2,0,2,2,2,2,2,2,0,1,0,0,0,0,1,2,2,2,2,2,2,2,1,1,2,1,2,1,0,2,0,1,1,1,0,1,1,2,2,0,1,0,1,1,1,1,0,0,2,0,2,2,1,2,0,2,1,2,2,1,2,2,2,2,0,2,2,1,2,2,2,0,2,2,1,0,2,1,2,2,2,0,1,2,2,1,2,0,0,1,2,2,0,2,2,2,2,1,2,0,2,2,2,2,2,1,1,1,0,0,1,1,2,1,2,1,1,1,0,2,1,0,0,0,2,1,0,0,0,2,2,2,1,2,2,2,1,0,2,1,1,1,2,2,0,0,0,1,2,2,0,2,2,1,2,1,2,1,2,0,0,1,1,2,0,2,0,2,0,2,2,2,1,1,2,0,2,2,2,2,1,1,0,2,0,2,0,1,2,2,2,0,0,0,0,2,0,1,2,0,2,2,2,2,0,2,2,1,2,1,2,0,2,2,0,2,2,1,2,0,0,2,2,2,0,2,2,1,2,2,2,0,2,1,1,0,2,0,2,1,2,2,2,2,1,2,2,2,2,0,0,2,0,2,2,1,0,0,1,1,2,0,2,2,0,1,0,2,0,1,0,0,2,0,2,2,1,0,2,1,2,0,2,2,2,2,2,1,0,1,0,2,2,1,2,2,0,0,2,1,2,0,2,1,2,0,2,1,2,2,0,2,1,0,1,2,2,2,0,2,2,2,0,1,2,1,2,0,0,2,2,1,2,2,0,1,2,0,2,1,0,2,2,0,2,0,0,0,2,2,1,2,1,2,2,2,0,1,0,2,2,2,2,2,1,2,2,1,2,0,1,1,2,2,2,1,2,2,2,2,2,1,1,1,0,0,2,1,2,0,2,2,0,2,1,2,2,1,2,0,1,0,1,2,2,2,0,2,0,2,2,2,2,1,1,1,2,0,2,0,0,2,0,0,1,0,1,0,0,1,2,2,2,2,1,2,2,1,1,0,0,1,2,0,2,2,1,1,2,2,1,0,2,0,2,2,2,0,1,2,0,0,2,2,2,2,0,2,0,2,2,2,0,1,2,2,2,2,0,2,2,0,2,2,2,0,0,1,2,1,2,1,0,0,2,2,0,1,2,0,0,2,2,2,0,2,1,2,1,0,2,2,2,2,0,2,2,2,2,0,2,2,2,2,0,1,2,0,2,1,2,0,2,0,0,2,2,2,1,1,2,2,0,2,1,2,0,1,2,0,2,2,1,2,2,2,1,0,2,1,2,2,2,1,0,2,1,1,0,2,2,1,2,1,1,0,2,2,0,1,2,2,1,2,1,2,1,2,0,2,1,1,2,2,2,0,1,2,2,0,1,2,2,2,2,1,2,1,1,1,0,2,0,2,0,2,1,2,1,2,2,2,0,1,2,1,2,1,1,2,1,2,2,1,1,2,0,1,2,2,1,1,0,0,2,1,0,1,2,2,2,2,0,2,1,2,2,0,1,1,2,2,2,2,1,2,2,0,2,1,1,2,2,2,1,2,2,2,2,2,2,2,1,0,0,0,2,1,1,2,2,2,2,2,0,2,0,1,2,2,2,2,0,2,2,1,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,1,2,2,1,2,0,2,1,1,0,2,0,2,2,2,0,0,0,2,1,1,2,0,2,0,2,1,2,1,1,0,2,2,2,2,2,0,1,0,1,0,1,1,0,2,0,2,2,2,2,2,2,1,2,1,2,0,0,2,1,0,0,0,2,2,1,0,2,1,1,2,1,1,1,2,1,0,0,2,0,2,2,2,2,2,1,2,0,1,2,0,2,2,0,2,2,2,2,1,2,2,2,2,2,0,2,2,2,0,2,1,1,2,1,2,2,0,1,2,2,2,0,2,1,2,2,2,2,2,2,0,1,2,2,0,1,0,1,0,1,2,2,1,1,1,0,1,1,2,1,0,0,1,0,0,2,0,2,1,0,2,1,2,1,2,2,2,1,0,1,2,2,2,0,2,1,0,2,1,1,1,1,0,2,0,2,1,1,0,0,0,1,2,1,2,1,2,0,2,2,2,2,1,2,0,2,1,2,2,0,0,0,2,0,1,2,1,2,1,2,1,1,2,1,2,2,1,0,1,2,2,2,2,1,2,2,0,0,2,2,0,2,2,1,2,2,1,2,2,0,1,2,2,2,0,2,1,2,0,2,0,0,2,2,2,2,0,0,1,2,2,1,2,2,2,2,2,2,2,2,1,0,2,2,1,1,0,2,2,1,2,2,1,1,1,0,0,0,1,2,0,1,1,0,2,1,2,1,1,1,2,2,2,1,2,1,0,0,1,1,1,2,0,0,1,1,2,2,0,0,1,1,0,2,1,2,2,1,0,1,2,0,1,1,2,2,2,2,2,2,2,1,1,2,0,2,0,0,2,2,1,2,2,2,1,1,2,2,1,2,2,2,0,1,0,1,1,0,0,0,2,1,2,1,2,0,2,0,2,2,2,2,2,0,2,2,1,2,0,1,0,2,2,0,1,2,1,2,1,2,1,2,0,1,0,2,1,1,0,2,2,2,2,0,2,2,0,2,0,0,2,1,2,2,2,1,2,0,1,1,1,2,0,2,0,2,2,2,2,0,2,1,0,2,0,2,2,1,2,2,1,1,2,0,2,2,1,1,1,0,0,2,1,2,0,1,2,2,0,0,1,0,1,2,1,2,0,0,2,2,0,1,1,1,2,1,2,1,2,2,2,0,1,2,0,2,0,2,2,2,2,0,2,2,1,0,2,2,0,1,1,0,1,0,2,2,0,0,0,1,2,2,2,1,1,1,1,1,1,2,2,2,2,0,2,2,0,2,2,0,0,2,2,1,2,2,2,2,1,2,1,0,0,2,1,2,0,1,0,0,2,0,2,2,2,1,1,2,1,0,2,1,2,2,2,0,1,2,0,0,1,2,0,2,2,1,1,0,1,2,0,2,0,1,2,2,1,1,2,1,0,1,2,2,2,0,1,2,2,0,1,2,0,1,0,0,0,2,1,0,1,2,0,2,1,2,1,1,0,2,2,1,2,2,2,2,2,0,2,2,2,2,1,2,0,2,2,2,1,0,2,1,2,0,1,0,0,2,1,1,1,0,1,0,0,1,1,0,2,2,2,1,2,1,0,1,2,0,2,2,1,2,2,0,2,2,0,2,1,2,2,2,2,1,2,2,1,2,0,2,2,0,1,1,0,2,0,2,1,2,2,2,2,0,2,1,0,2,2,1,0,1,2,0,0,0,1,0,1,1,1,2,2,1,1,1,2,2,1,0,0,0,1,1,1,0,1,2,1,1,2,1,2,0,2,0,1,0,1,2,2,2,2,1,1,0,1,2,0,0,0,2,1,2,2,2,2,0,1,2,2,1,1,0,2,1,2,1,2,2,2,2,0,2,2,2,2,0,0,2,1,2,1,2,0,2,2,2,0,0,1,1,0,0,2,1,1,0,0,2,2,2,2,2,0,2,2,2,0,2,2,2,2,0,2,2,0,2,2,2,0,2,2,0,0,2,1,2,0,2,1,2,2,0,0,2,1,1,1,0,0,0,2,2,2,1,0,2,0,0,1,0,2,2,1,2,1,2,0,0,0,2,0,0,1,1,1,2,1,2,2,2,0,1,0,2,0,2,0,2,1,0,2,1,2,2,1,2,0,1,1,2,0,0,2,2,1,2,1,1,0,1,0,2,1,2,1,0,1,2,1,2,1,0,2,1,2,2,2,2,2,0,0,2,0,2,0,2,2,0,1,1,1,0,1,2,0,2,1,0,2,0,2,2,0,1,0,1,2,2,0,0,2,2,0,1,1,2,2,2,1,2,2,2,2,2,1,2,2,2,0,2,2,1,2,2,2,2,2,2,1,0,2,2,2,2,0,0,2,2,2,2,2,0,2,2,0,2,0,2,1,2,2,0,0,0,1,2,1,2,0,2,0,1,1,2,1,0,0,0,2,0,1,0,1,1,2,2,1,2,0,2,2,0,2,1,0,0,2,0,0,2,0,0,2,2,0,2,2,0,0,1,2,2,2,2,1,0,0,1,1,1,0,0,2,2,2,1,2,2,2,0,1,2,2,2,0,0,2,2,0,2,0,2,0,0,1,2,0,0,0,1,2,2,2,1,1,0,2,0,1,0,2,1,0,1,0,0,0,2,2,2,2,2,2,2,1,2,2,0,0,1,2,2,0,2,0,2,0,2,2,2,0,2,2,2,1,2,2,0,1,1,2,0,2,2,2,2,0,1,2,2,2,0,1,1,2,1,0,2,2,2,2,2,1,2,2,1,2,0,2,1,0,2,0,1,1,2,0,0,1,0,2,0,2,1,2,0,1,2,0,2,1,2,2,0,0,2,0,0,1,2,1,2,2,2,2,0,0,1,1,1,1,2,2,1,2,2,2,2,2,1,2,2,0,2,1,2,1,2,1,2,2,2,1,2,0,2,2,0,2,1,1,1,2,2,2,2,2,2,0,2,2,2,2,0,0,2,0,2,0,2,2,2,2,2,2,2,2,2,2,0,2,0,0,2,2,2,1,2,2,0,1,2,0,2,0,0,2,1,2,2,2,1,2,1,1,2,0,0,2,0,2,1,2,0,1,0,1,2,1,2,0,0,2,0,1,2,1,2,1,1,2,0,0,0,2,0,0,0,2,2,2,0,2,0,0,0,2,2,0,2,1,2,2,0,2,2,2,2,1,2,1,2,2,2,0,2,1,1,2,1,0,2,2,1,2,2,2,2,2,1,0,0,0,2,2,0,0,1,1,1,2,0,0,2,0,2,1,0,2,2,0,1,0,1,2,0,2,2,1,0,2,2,2,2,2,0,2,2,2,2,2,0,2,2,0,2,1,0,0,0,2,2,1,2,1,2,1,2,2,0,2,2,2,2,1,0,2,0,0,2,2,1,2,1,2,2,1,1,2,0,2,2,2,2,2,0,2,0,0,2,2,1,1,2,2,2,2,0,1,2,2,0,1,1,0,2,1,2,1,0,0,2,2,0,0,2,0,1,0,2,2,2,1,1,2,2,1,0,0,2,0,2,1,2,1,2,1,0,2,0,1,1,2,2,2,2,2,2,2,0,1,2,1,2,0,2,0,1,1,0,2,1,2,0,2,2,2,0,2,0,2,2,1,2,1,0,2,2,1,0,2,0,0,2,1,0,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,0,0,2,1,2,0,0,2,1,1,0,0,2,2,1,0,2,1,0,2,2,2,0,1,2,0,1,2,1,1,0,2,0,0,1,0,0,2,2,1,0,1,2,2,2,1,0,0,1,1,2,0,2,0,1,1,2,1,0,0,2,2,2,2,0,2,2,1,2,1,0,0,1,2,2,2,2,2,1,0,2,2,2,2,0,2,2,1,2,0,2,2,0,2,2,2,2,2,0,1,1,1,0,1,1,1,0,1,2,0,2,2,2,2,1,0,1,0,2,0,0,1,0,0,2,2,0,0,2,0,2,2,1,0,1,2,0,1,1,0,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,1,0,2,2,1,0,0,2,0,1,0,2,1,1,1,2,2,0,1,0,2,2,0,2,2,1,1,1,2,0,0,1,2,0,0,2,2,2,1,0,1,2,2,0,1,2,2,1,2,2,0,1,2,2,2,2,1,1,0,1,0,2,0,0,2,1,1,0,2,1,2,0,1,0,1,1,0,0,0,2,0,2,1,1,1,1,0,1,1,2,1,1}
	var width int = 25
	var height int = 6
	var stats = map[int]layerStats{}

	var layer int
	for i := range rawDigits {
		if i % (width * height) == 0 {
			layer++
			stats[layer] = layerStats{layer, 0, 0, 0, make([]int, width*height)}
		}
		tempLayer := stats[layer]
		tempLayer.data[i%(width * height)] = rawDigits[i]

		switch rawDigits[i] {
		case 0:
			tempLayer.SetZeroes(stats[layer].zeroes + 1)
		case 1:
			tempLayer.SetOnes(stats[layer].ones + 1)
		case 2:
			tempLayer.SetTwos(stats[layer].twos + 1)
		}
		stats[layer] = tempLayer
	}

	var lowestZeros, lowestLayer int
	lowestZeros = math.MaxInt32
	for _, layerData := range stats {
		if layerData.zeroes < lowestZeros {
			lowestZeros = layerData.zeroes
			lowestLayer = layerData.layer
		}
	}
	var result int = stats[lowestLayer].ones * stats[lowestLayer].twos
	fmt.Println("Layer:", lowestLayer, "1s * 2s", result)

	finalLayer := make([]int, width*height)

	for p := 0; p < width*height; p++ {
		pixelStack := make([]int, len(stats))
		for layer := 0; layer < len(stats); layer++ {
			pixelStack[layer] = rawDigits[layer*(width*height)+p]
		}
		finalLayer[p] = calcPixel(pixelStack)
	}

	for row := 0; row < height; row++ {
		for x := 0; x < width; x++ {
			if finalLayer[width*row+x] == 1 {
				fmt.Print("█")
			} else {
				fmt.Print(" ")
			}
		}
		fmt.Print("\n")
	}
}

func day9() {
	rawCodes := []int64{1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,3,1,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,31,1019,1101,25,0,1008,1102,35,1,1009,1102,422,1,1029,1102,1,21,1005,1102,1,734,1027,1102,29,1,1000,1101,32,0,1018,1102,28,1,1016,1101,0,38,1015,1101,0,378,1023,1101,30,0,1017,1102,1,381,1022,1101,0,37,1006,1102,1,1,1021,1101,0,24,1011,1102,1,23,1002,1101,0,0,1020,1101,0,20,1007,1101,427,0,1028,1101,26,0,1014,1101,27,0,1010,1101,0,39,1001,1101,34,0,1012,1102,1,36,1013,1101,0,33,1003,1101,804,0,1025,1101,737,0,1026,1102,1,809,1024,1102,1,22,1004,109,9,1201,-7,0,63,1008,63,20,63,1005,63,205,1001,64,1,64,1106,0,207,4,187,1002,64,2,64,109,2,21102,40,1,1,1008,1012,40,63,1005,63,233,4,213,1001,64,1,64,1106,0,233,1002,64,2,64,109,4,1208,-7,25,63,1005,63,255,4,239,1001,64,1,64,1106,0,255,1002,64,2,64,109,-24,1207,10,38,63,1005,63,271,1105,1,277,4,261,1001,64,1,64,1002,64,2,64,109,25,21107,41,40,-3,1005,1013,293,1105,1,299,4,283,1001,64,1,64,1002,64,2,64,109,5,1205,-1,311,1106,0,317,4,305,1001,64,1,64,1002,64,2,64,109,-23,1202,6,1,63,1008,63,22,63,1005,63,339,4,323,1105,1,343,1001,64,1,64,1002,64,2,64,109,1,2101,0,2,63,1008,63,37,63,1005,63,367,1001,64,1,64,1106,0,369,4,349,1002,64,2,64,109,29,2105,1,-5,1106,0,387,4,375,1001,64,1,64,1002,64,2,64,109,-26,2101,0,0,63,1008,63,23,63,1005,63,409,4,393,1106,0,413,1001,64,1,64,1002,64,2,64,109,26,2106,0,0,4,419,1106,0,431,1001,64,1,64,1002,64,2,64,109,-17,21108,42,42,6,1005,1017,453,4,437,1001,64,1,64,1106,0,453,1002,64,2,64,109,7,21101,43,0,-8,1008,1010,44,63,1005,63,477,1001,64,1,64,1105,1,479,4,459,1002,64,2,64,109,-7,1206,10,495,1001,64,1,64,1106,0,497,4,485,1002,64,2,64,109,-5,2108,36,0,63,1005,63,513,1106,0,519,4,503,1001,64,1,64,1002,64,2,64,109,3,2102,1,-5,63,1008,63,22,63,1005,63,541,4,525,1105,1,545,1001,64,1,64,1002,64,2,64,109,3,1207,-6,38,63,1005,63,567,4,551,1001,64,1,64,1105,1,567,1002,64,2,64,109,-15,2107,20,8,63,1005,63,585,4,573,1106,0,589,1001,64,1,64,1002,64,2,64,109,-1,1208,5,36,63,1005,63,609,1001,64,1,64,1106,0,611,4,595,1002,64,2,64,109,30,21101,44,0,-7,1008,1019,44,63,1005,63,633,4,617,1106,0,637,1001,64,1,64,1002,64,2,64,109,-25,1201,0,0,63,1008,63,39,63,1005,63,659,4,643,1105,1,663,1001,64,1,64,1002,64,2,64,109,27,1206,-8,677,4,669,1106,0,681,1001,64,1,64,1002,64,2,64,109,-28,2108,29,0,63,1005,63,703,4,687,1001,64,1,64,1106,0,703,1002,64,2,64,109,5,21107,45,46,7,1005,1012,725,4,709,1001,64,1,64,1106,0,725,1002,64,2,64,109,30,2106,0,-8,1105,1,743,4,731,1001,64,1,64,1002,64,2,64,109,-22,21102,46,1,4,1008,1017,44,63,1005,63,767,1001,64,1,64,1105,1,769,4,749,1002,64,2,64,109,-15,1202,10,1,63,1008,63,23,63,1005,63,793,1001,64,1,64,1106,0,795,4,775,1002,64,2,64,109,19,2105,1,7,4,801,1105,1,813,1001,64,1,64,1002,64,2,64,109,6,1205,-2,827,4,819,1106,0,831,1001,64,1,64,1002,64,2,64,109,-20,2107,22,2,63,1005,63,851,1001,64,1,64,1106,0,853,4,837,1002,64,2,64,109,20,21108,47,44,-8,1005,1015,869,1105,1,875,4,859,1001,64,1,64,1002,64,2,64,109,-22,2102,1,4,63,1008,63,23,63,1005,63,899,1001,64,1,64,1106,0,901,4,881,4,64,99,21101,0,27,1,21102,915,1,0,1106,0,922,21201,1,28703,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,0,942,0,1106,0,922,22101,0,1,-1,21201,-2,-3,1,21101,957,0,0,1105,1,922,22201,1,-1,-2,1105,1,968,21201,-2,0,-2,109,-3,2105,1,0}
	// Test values
	//rawCodes := []int64{109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99}
	//rawCodes := []int64{1102,34915192,34915192,7,4,7,99,0}
	//rawCodes := []int64{104,1125899906842624,99}
	var codes = make([]int64, len(rawCodes))
	copy(codes, rawCodes)
	pos0 := runIntComp(codes, gatherInputFromUser, printOutputHandler)

	fmt.Println("Position 0:", pos0)
}

func gcdTwoNumbers(x int, y int) (gcd int){
	// Greatest common denominator of two numbers, which gives us slope divisors
	x = AbsInt(x)
	y = AbsInt(y)
	for ; y > 0 ; {
		var t = y
		y = x % y
		x = t
	}
	return x
}

func getAngle(x1 int, y1 int, x2 int, y2 int) float64 {
	// This returns the angle of the laser, starting with "up"
	var angleRadians = (math.Atan2(float64(y1 - y2), float64(x1 - x2)) * 180) / math.Pi
	angleRadians -= 90
	if angleRadians < 0 {
		angleRadians += 360
	}

	return angleRadians
}

func checkLineOfSight(input []string, x1 int, y1 int, x2 int, y2 int) bool {
	// This just makes sure we have line of sight from one asteroid to another without other asteroids in the middle
	if string(input[y2][x2]) != "#" { return false }
	if string(input[y1][x1]) != "#" { return false }
	if y2 == y1 && x2 == x1 { return false }
	// Make sure we have a minimal slope
	var dy = y2 - y1
	var dx = x2 - x1
	if dx != dy || dy != 0 {
		var gcd = gcdTwoNumbers(dy, dx)
		dy /= gcd
		dx /= gcd
	}
	// Now start us at the next point along the slope, and continue checking through the map
	var x = x1 + dx
	var y = y1 + dy
	for ; y >= 0 && y < len(input) && x >= 0 && x < len(input[0]); {
		if string(input[y][x]) == "#" {
			if y == y2 && x == x2 {
				return true
			}
				return false
			}
		y += dy
		x += dx
	}
	return false
}

func calcAsteroidsSeen(input []string, x int, y int) (count int) {
	// Iterate through all the _other_ asteroid points from a given asteroid point
	var asteroidsSeen = map[string]bool{}
	// Just brute force Lines to every point in the map to see what we hit
	for tx := 0; tx < len(input[0]); tx++ {
		for ty := 0; ty < len(input); ty++ {
			if tx == x && ty == y {
				continue
			}
			hit := checkLineOfSight(input, x, y, tx, ty)
			//fmt.Println("HitX and HitY:", hitX, hitY)
			if hit {
				key := string(tx) + "," + string(ty)
				if _, exists := asteroidsSeen[key]; !exists {
					asteroidsSeen[key] = true
				}
			}
		}
	}
	return len(asteroidsSeen)
}

type angleCoordinates struct {
	angle float64
	x int
	y int
}

func day10() {
	// Today's solution uses a lot of pfgithub's Javascript version, because grid ray tracing isn't my forte
	var input = []string{
		".#......#...#.....#..#......#..##..#",
		"..#.......#..........#..##.##.......",
		"##......#.#..#..#..##...#.##.###....",
		"..#........#...........#.......##...",
		".##.....#.......#........#..#.#.....",
		".#...#...#.....#.##.......#...#....#",
		"#...#..##....#....#......#..........",
		"....#......#.#.....#..#...#......#..",
		"......###.......#..........#.##.#...",
		"#......#..#.....#..#......#..#..####",
		".##...##......##..#####.......##....",
		".....#...#.........#........#....#..",
		"....##.....#...#........#.##..#....#",
		"....#........#.###.#........#...#..#",
		"....#..#.#.##....#.........#.....#.#",
		"##....###....##..#..#........#......",
		".....#.#.........#.......#....#....#",
		".###.....#....#.#......#...##.##....",
		"...##...##....##.........#...#......",
		".....#....##....#..#.#.#...##.#...#.",
		"#...#.#.#.#..##.#...#..#..#..#......",
		"......#...#...#.#.....#.#.....#.####",
		"..........#..................#.#.##.",
		"....#....#....#...#..#....#.....#...",
		".#####..####........#...............",
		"#....#.#..#..#....##......#...#.....",
		"...####....#..#......#.#...##.....#.",
		"..##....#.###.##.#.##.#.....#......#",
		"....#.####...#......###.....##......",
		".#.....#....#......#..#..#.#..#.....",
		"..#.......#...#........#.##...#.....",
		"#.....####.#..........#.#.......#...",
		"..##..#..#.....#.#.........#..#.#.##",
		".........#..........##.#.##.......##",
		"#..#.....#....#....#.#.......####..#",
		"..............#.#...........##.#.#..",
	}

	// Jacob's
	//var input = []string {
	//	".#......##.#..#.......#####...#..",
	//	"...#.....##......###....#.##.....",
	//	"..#...#....#....#............###.",
	//	".....#......#.##......#.#..###.#.",
	//	"#.#..........##.#.#...#.##.#.#.#.",
	//	"..#.##.#...#.......#..##.......##",
	//	"..#....#.....#..##.#..####.#.....",
	//	"#.............#..#.........#.#...",
	//	"........#.##..#..#..#.#.....#.#..",
	//	".........#...#..##......###.....#",
	//	"##.#.###..#..#.#.....#.........#.",
	//	".#.###.##..##......#####..#..##..",
	//	".........#.......#.#......#......",
	//	"..#...#...#...#.#....###.#.......",
	//	"#..#.#....#...#.......#..#.#.##..",
	//	"#.....##...#.###..#..#......#..##",
	//	"...........#...#......#..#....#..",
	//	"#.#.#......#....#..#.....##....##",
	//	"..###...#.#.##..#...#.....#...#.#",
	//	".......#..##.#..#.............##.",
	//	"..###........##.#................",
	//	"###.#..#...#......###.#........#.",
	//	".......#....#.#.#..#..#....#..#..",
	//	".#...#..#...#......#....#.#..#...",
	//	"#.#.........#.....#....#.#.#.....",
	//	".#....#......##.##....#........#.",
	//	"....#..#..#...#..##.#.#......#.#.",
	//	"..###.##.#.....#....#.#......#...",
	//	"#.##...#............#..#.....#..#",
	//	".#....##....##...#......#........",
	//	"...#...##...#.......#....##.#....",
	//	".#....#.#...#.#...##....#..##.#.#",
	//	".#.#....##.......#.....##.##.#.##",
	//}

	// TestInput
	//var input = []string {
	//	".#..##.###...#######",
	//	"##.############..##.",
	//	".#.######.########.#",
	//	".###.#######.####.#.",
	//	"#####.##.#.##.###.##",
	//	"..#####..#.#########",
	//	"####################",
	//	"#.####....###.#.#.##",
	//	"##.#################",
	//	"#####.##.###..####..",
	//	"..######..##.#######",
	//	"####.##.####...##..#",
	//	".#####..#.######.###",
	//	"##...#.##########...",
	//	"#.##########.#######",
	//	".####.#.###.###.#.##",
	//	"....##.##.###..#####",
	//	".#.#.###########.###",
	//	"#.#.#.#####.####.###",
	//	"###.##.####.##.#..##",
	//}

	var count, bestX, bestY int
	var bestPoint string

	for x := 0; x < len(input[0]); x++ {
		for y := 0; y < len(input); y++ {
			pointCount := calcAsteroidsSeen(input, x, y)
			if pointCount > count {
				count = pointCount
				bestX = x
				bestY = y
				bestPoint = strconv.FormatInt(int64(x), 10) + "," + strconv.FormatInt(int64(y), 10)
			}
		}
	}
	fmt.Println("Best point with count:", bestPoint, count)

	var hits = []angleCoordinates{}

	for y2 := 0; y2 < len(input); y2++ {
		for x2 := 0; x2 < len(input[0]); x2++ {
			hit := checkLineOfSight(input, bestX, bestY, x2, y2)
			if !hit {
				continue
			}
			hits = append(hits, angleCoordinates{getAngle(bestX, bestY, x2, y2), x2, y2})
		}
	}
	sort.Slice(hits, func(i, j int) bool {
		return hits[i].angle < hits[j].angle
	})

	fmt.Println(hits[199].x, hits[199].y)
}

const (
	UP int64 = 0
	DOWN int64 = 1
	LEFT int64 = 2
	RIGHT int64 = 3
)

func turnRobot(currentDirection int64, turnDirection int64) (newDirection int64) {
	if turnDirection == 0 { // Turn left
		switch currentDirection {
		case UP:
			return LEFT
		case LEFT:
			return DOWN
		case DOWN:
			return RIGHT
		case RIGHT:
			return UP
		}
	} else {
		switch currentDirection {
		case UP:
			return RIGHT
		case RIGHT:
			return DOWN
		case DOWN:
			return LEFT
		case LEFT:
			return UP
		}
	}
	return currentDirection
}

func generateRobotIOHandlers(initial int64) (input func() int64, output func(int64), getMap func() (map[gridPoint]bool, []gridPoint)){
	var hullMap = map[gridPoint]bool{}
	var firstInput = true
	var isColorInstruction bool = true
	var currentGridPoint = gridPoint{0,0}
	var lowGridPoint = gridPoint{0,0}
	var highGridPoint = gridPoint{0,0}
	var currentDirection = UP
	var directionMove = []gridPoint{
		{1, 0},
		{-1, 0},
		{0, -1},
		{0, 1},
	}

	output = func(value int64) {
		if isColorInstruction {
			hullMap[currentGridPoint] = value != 0
		} else {
			currentDirection = turnRobot(currentDirection, value)
			moveAdjusts := directionMove[currentDirection]
			currentGridPoint.x += moveAdjusts.x
			currentGridPoint.y += moveAdjusts.y

			if currentGridPoint.x < lowGridPoint.x {lowGridPoint.x = currentGridPoint.x}
			if currentGridPoint.y < lowGridPoint.y {lowGridPoint.y = currentGridPoint.y}
			if currentGridPoint.x > highGridPoint.x {highGridPoint.x = currentGridPoint.x}
			if currentGridPoint.y > highGridPoint.y {highGridPoint.y = currentGridPoint.y}
		}
		isColorInstruction = !isColorInstruction
	}

	input = func() int64 {
		if firstInput {
			firstInput = false
			return initial
		}
		if color, exists := hullMap[currentGridPoint]; exists {
			if color {
				return 1
			}
		}
		return 0
	}

	getMap = func() (map[gridPoint]bool, []gridPoint) {
		return hullMap, []gridPoint{lowGridPoint, highGridPoint}
	}
	return input, output, getMap
}

func day11() {
	var rawCodes = []int64{3,8,1005,8,326,1106,0,11,0,0,0,104,1,104,0,3,8,1002,8,-1,10,101,1,10,10,4,10,108,0,8,10,4,10,101,0,8,28,2,1104,14,10,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,101,0,8,55,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,1001,8,0,77,2,103,7,10,3,8,102,-1,8,10,101,1,10,10,4,10,108,0,8,10,4,10,102,1,8,102,1006,0,76,1,6,5,10,1,1107,3,10,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,1,8,10,4,10,1001,8,0,135,1,1002,8,10,2,1101,3,10,1006,0,97,1,101,0,10,3,8,1002,8,-1,10,101,1,10,10,4,10,108,1,8,10,4,10,101,0,8,172,1006,0,77,1006,0,11,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,102,1,8,201,1006,0,95,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,1,10,4,10,1002,8,1,226,2,3,16,10,1,6,4,10,1006,0,23,1006,0,96,3,8,1002,8,-1,10,1001,10,1,10,4,10,108,0,8,10,4,10,1001,8,0,261,1,3,6,10,2,1006,3,10,1006,0,78,3,8,102,-1,8,10,101,1,10,10,4,10,1008,8,0,10,4,10,101,0,8,295,1006,0,89,1,108,12,10,2,103,11,10,101,1,9,9,1007,9,1057,10,1005,10,15,99,109,648,104,0,104,1,21102,1,838365918100,1,21102,343,1,0,1106,0,447,21102,387365315476,1,1,21102,354,1,0,1106,0,447,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,3,10,104,0,104,1,3,10,104,0,104,0,3,10,104,0,104,1,21101,0,179318254811,1,21102,401,1,0,1106,0,447,21102,1,97911876839,1,21101,0,412,0,1106,0,447,3,10,104,0,104,0,3,10,104,0,104,0,21101,838345577320,0,1,21101,435,0,0,1106,0,447,21102,1,838337188628,1,21101,0,446,0,1105,1,447,99,109,2,21202,-1,1,1,21101,40,0,2,21102,478,1,3,21101,0,468,0,1106,0,511,109,-2,2106,0,0,0,1,0,0,1,109,2,3,10,204,-1,1001,473,474,489,4,0,1001,473,1,473,108,4,473,10,1006,10,505,1102,1,0,473,109,-2,2106,0,0,0,109,4,2102,1,-1,510,1207,-3,0,10,1006,10,528,21101,0,0,-3,21202,-3,1,1,22101,0,-2,2,21101,1,0,3,21102,1,547,0,1106,0,552,109,-4,2106,0,0,109,5,1207,-3,1,10,1006,10,575,2207,-4,-2,10,1006,10,575,22102,1,-4,-4,1105,1,643,22102,1,-4,1,21201,-3,-1,2,21202,-2,2,3,21101,0,594,0,1105,1,552,21201,1,0,-4,21101,0,1,-1,2207,-4,-2,10,1006,10,613,21101,0,0,-1,22202,-2,-1,-2,2107,0,-3,10,1006,10,635,22102,1,-1,1,21101,635,0,0,106,0,510,21202,-2,-1,-2,22201,-4,-2,-4,109,-5,2106,0,0}

	inputFunc, outputFunc, getMap := generateRobotIOHandlers(0)
	pos0 := runIntComp(rawCodes, inputFunc, outputFunc)

	identifierMap, dimensions := getMap()
	fmt.Println("Position 0:", pos0)
	fmt.Println("Dimensions:", dimensions)
	fmt.Println("Length:", len(identifierMap))

	inputFunc, outputFunc, getMap = generateRobotIOHandlers(1)

	pos0 = runIntComp(rawCodes, inputFunc, outputFunc)

	identifierMap, dimensions = getMap()
	fmt.Println("Position 0:", pos0)
	fmt.Println("Dimensions:", dimensions)
	fmt.Println("Length:", len(identifierMap))

	fmt.Println()
	// I have X swapped.  I found this out at the end, so I'm not fixing the root issue just now.
	for x := dimensions[1].x; x >= dimensions[0].x; x-- {
		for y := dimensions[0].y; y <= dimensions[1].y; y++ {
			block := " "
			if color, exists := identifierMap[gridPoint{x, y}]; exists {
				if color {
					block = "█"
				}
			}
			fmt.Print(block)
		}
		fmt.Print("\n")
	}
}

func generateGameIOHandlers() (input func() int64, output func(int64), printMap func()) {
	var width, height, phase, x, y, score, currentBallX, currentPaddleX int64
	var display = map[string]string{}
	var ballChar = "■"
	var blockChar = "█"
	var paddleChar = "═"

	var tileMap = []string {
		" ",
		"│",
		blockChar,
		paddleChar,
		ballChar,
	}

	height = 19

	input = func() int64 {
		if currentBallX < currentPaddleX {
			return -1
		} else if currentBallX > currentPaddleX {
			return 1
		}
		return 0
	}

	printMap = func() {
		var blocks int64
		for row := int64(0); row < height; row++ {
			for col := int64(0); col < width; col++ {
				point := string(col) + "," + string(row)
				if display[point] == blockChar {
					blocks++
				}
				fmt.Print(display[point])
			}
			fmt.Println()
		}
		fmt.Println(score, "        ", blocks)
	}

	output = func(value int64) {
		switch phase{
		case 0:
			if width <= value {
				width = value + 1
			}
			x = value
			phase++
		case 1:
			if height <= value {
				height = value + 1
			}
			y = value
			phase++
		case 2:
			if x != -1 {
				if tileMap[value] == paddleChar {
					currentPaddleX = x
				}
				if tileMap[value] == ballChar {
					currentBallX = x
				}
				display[string(x)+","+string(y)] = tileMap[value]
			} else {
				score = value
			}
			phase = 0
			if x == width-1 && y == height-1 {
				printMap()
			}
		}
	}

	return input, output, printMap
}

func day13() {
	var game = []int64{2,380,379,385,1008,2159,116649,381,1005,381,12,99,109,2160,1101,0,0,383,1101,0,0,382,21001,382,0,1,21001,383,0,2,21102,1,37,0,1106,0,578,4,382,4,383,204,1,1001,382,1,382,1007,382,38,381,1005,381,22,1001,383,1,383,1007,383,20,381,1005,381,18,1006,385,69,99,104,-1,104,0,4,386,3,384,1007,384,0,381,1005,381,94,107,0,384,381,1005,381,108,1105,1,161,107,1,392,381,1006,381,161,1102,-1,1,384,1105,1,119,1007,392,36,381,1006,381,161,1102,1,1,384,21002,392,1,1,21101,0,18,2,21102,1,0,3,21101,0,138,0,1106,0,549,1,392,384,392,20102,1,392,1,21102,18,1,2,21102,3,1,3,21101,0,161,0,1105,1,549,1101,0,0,384,20001,388,390,1,21002,389,1,2,21101,180,0,0,1106,0,578,1206,1,213,1208,1,2,381,1006,381,205,20001,388,390,1,21002,389,1,2,21101,0,205,0,1106,0,393,1002,390,-1,390,1102,1,1,384,21001,388,0,1,20001,389,391,2,21102,228,1,0,1105,1,578,1206,1,261,1208,1,2,381,1006,381,253,20102,1,388,1,20001,389,391,2,21101,253,0,0,1105,1,393,1002,391,-1,391,1102,1,1,384,1005,384,161,20001,388,390,1,20001,389,391,2,21102,1,279,0,1106,0,578,1206,1,316,1208,1,2,381,1006,381,304,20001,388,390,1,20001,389,391,2,21102,304,1,0,1105,1,393,1002,390,-1,390,1002,391,-1,391,1102,1,1,384,1005,384,161,20101,0,388,1,20101,0,389,2,21102,0,1,3,21102,338,1,0,1106,0,549,1,388,390,388,1,389,391,389,20101,0,388,1,21001,389,0,2,21101,0,4,3,21101,0,365,0,1105,1,549,1007,389,19,381,1005,381,75,104,-1,104,0,104,0,99,0,1,0,0,0,0,0,0,280,17,15,1,1,19,109,3,21201,-2,0,1,22101,0,-1,2,21102,0,1,3,21102,414,1,0,1106,0,549,21202,-2,1,1,21202,-1,1,2,21102,429,1,0,1105,1,601,2101,0,1,435,1,386,0,386,104,-1,104,0,4,386,1001,387,-1,387,1005,387,451,99,109,-3,2105,1,0,109,8,22202,-7,-6,-3,22201,-3,-5,-3,21202,-4,64,-2,2207,-3,-2,381,1005,381,492,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,481,21202,-4,8,-2,2207,-3,-2,381,1005,381,518,21202,-2,-1,-1,22201,-3,-1,-3,2207,-3,-2,381,1006,381,507,2207,-3,-4,381,1005,381,540,21202,-4,-1,-1,22201,-3,-1,-3,2207,-3,-4,381,1006,381,529,21202,-3,1,-7,109,-8,2105,1,0,109,4,1202,-2,38,566,201,-3,566,566,101,639,566,566,1202,-1,1,0,204,-3,204,-2,204,-1,109,-4,2106,0,0,109,3,1202,-1,38,594,201,-2,594,594,101,639,594,594,20101,0,0,-2,109,-3,2105,1,0,109,3,22102,20,-2,1,22201,1,-1,1,21102,1,383,2,21101,430,0,3,21102,1,760,4,21101,0,630,0,1105,1,456,21201,1,1399,-2,109,-3,2106,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,2,2,2,0,2,2,2,0,0,2,2,2,0,2,0,2,2,0,2,2,2,2,2,0,2,2,2,0,0,0,0,0,1,1,0,0,2,2,2,2,2,2,2,2,0,2,2,0,0,2,2,0,0,2,2,2,2,0,0,0,0,0,2,2,2,2,0,0,2,0,1,1,0,0,2,2,2,0,2,2,2,2,2,2,2,0,2,0,2,2,0,0,0,2,2,0,2,2,0,2,2,2,2,2,2,2,2,0,1,1,0,0,0,2,0,2,2,2,0,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,0,1,1,0,0,2,0,0,2,2,2,0,2,2,2,2,0,2,0,2,0,2,2,2,2,2,2,2,0,0,2,2,2,2,2,0,2,2,0,1,1,0,2,2,0,2,0,2,2,0,2,2,2,2,0,2,2,0,2,2,0,2,2,2,2,2,2,0,2,2,2,0,2,0,2,0,0,1,1,0,2,2,2,2,2,2,2,2,0,2,0,2,2,2,0,0,0,2,0,2,2,2,0,2,2,2,2,2,0,0,2,2,0,2,0,1,1,0,0,2,2,0,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,0,2,2,2,2,2,2,0,1,1,0,2,0,2,2,2,0,2,2,2,0,0,2,2,2,2,0,0,0,2,2,2,0,0,2,0,0,2,2,2,2,0,2,0,0,0,1,1,0,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,2,2,2,2,0,2,2,2,2,2,0,2,0,0,1,1,0,2,2,2,0,2,2,0,0,2,2,2,2,0,0,2,2,2,0,0,2,2,0,2,0,2,0,2,0,2,2,0,2,2,2,0,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,0,0,2,2,2,0,0,2,2,2,0,2,2,2,2,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,19,28,61,4,98,57,92,26,50,7,4,93,91,74,82,82,53,50,44,66,37,43,26,12,68,84,76,40,36,22,37,44,27,92,66,68,29,34,45,60,40,21,65,41,40,64,92,11,36,81,37,39,87,7,42,10,72,35,35,51,60,76,47,1,6,51,48,46,18,82,84,11,42,76,65,98,62,71,83,51,79,76,70,46,10,67,87,78,6,63,38,23,97,69,82,84,20,97,83,4,70,96,75,38,33,32,69,80,52,80,91,95,2,30,56,52,49,64,38,32,18,97,82,93,76,1,8,37,42,80,66,38,53,33,1,31,40,54,90,20,78,13,65,4,35,28,67,37,28,56,69,50,89,63,20,55,68,59,90,18,28,25,73,25,39,26,6,65,83,5,14,4,31,9,53,25,2,9,34,10,21,43,23,39,15,29,52,36,10,71,35,18,90,86,53,58,7,10,33,81,5,50,64,17,84,85,17,37,48,43,71,10,13,83,8,88,66,95,42,54,91,62,64,53,58,56,42,67,12,29,34,14,58,37,37,49,42,8,41,44,41,17,62,59,54,67,43,42,65,12,23,76,79,93,12,35,65,87,12,74,28,56,74,25,68,91,69,98,26,67,54,18,25,63,60,28,84,93,93,93,7,84,52,50,7,18,16,57,27,87,61,30,20,81,59,33,98,27,15,83,89,44,26,31,79,3,46,29,24,64,94,58,87,1,87,63,55,68,27,4,98,5,8,30,73,74,30,4,57,78,33,55,1,50,16,87,67,59,62,85,3,2,89,54,44,95,34,8,10,78,75,6,70,53,48,60,68,60,79,4,51,81,66,58,44,45,91,69,24,41,96,6,98,45,87,46,29,83,29,90,13,22,7,83,56,89,62,54,87,32,12,1,78,19,37,66,42,13,49,16,32,90,43,28,72,67,42,18,10,55,27,21,75,95,24,91,9,70,48,5,49,70,11,79,23,24,93,30,21,34,40,56,25,62,55,26,38,74,67,23,33,35,41,83,79,64,61,87,4,29,66,82,67,97,46,78,95,73,15,9,90,19,52,67,66,91,73,97,51,4,35,52,33,86,35,16,45,1,18,23,72,67,94,3,8,67,87,19,10,79,35,24,57,60,21,48,55,37,58,81,95,15,48,70,37,69,92,87,85,6,13,44,21,12,9,14,61,69,18,65,56,50,20,23,23,4,72,30,92,50,91,83,17,94,10,83,21,70,50,65,20,39,70,7,61,34,57,38,38,39,55,48,68,56,24,66,18,41,60,25,56,50,43,65,61,95,25,30,95,10,51,31,41,64,52,5,21,37,62,75,55,10,96,28,85,12,28,4,86,46,14,26,48,26,77,15,69,16,58,68,91,32,5,66,53,69,48,54,38,13,10,9,18,67,45,97,65,74,72,7,47,93,79,77,87,68,80,8,53,86,77,33,74,78,94,92,22,9,41,34,76,25,66,55,53,1,62,23,82,23,70,58,43,34,16,6,15,55,7,5,51,23,14,11,94,91,40,21,18,28,1,77,86,27,97,6,7,31,58,20,64,41,16,65,8,11,6,51,48,44,81,5,78,18,27,89,24,55,97,70,83,48,37,97,77,32,41,80,30,25,63,76,75,85,84,61,65,13,82,69,41,28,9,46,57,60,71,55,70,13,26,90,20,21,29,59,80,60,33,73,14,19,83,12,35,52,51,70,79,36,36,40,55,31,80,43,76,59,33,82,116649}

	inputFunc, outputFunc, printMapFunc := generateGameIOHandlers()

	runIntComp(game, inputFunc, outputFunc)

	printMapFunc()
}